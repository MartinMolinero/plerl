Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> declarationList
Rule 2     declarationList -> declaration declarationList
Rule 3     declarationList -> declaration
Rule 4     declaration -> varDeclaration
Rule 5     declaration -> statement
Rule 6     declaration -> constDeclaration
Rule 7     declaration -> funcDeclaration
Rule 8     variable -> DOLLAR IDENTIFIER
Rule 9     varDeclaration -> variable ASSIGN sumExp
Rule 10    varDeclaration -> variable ASSIGN STDIN
Rule 11    variableType -> number
Rule 12    number -> INTEGER
Rule 13    number -> FLOAT
Rule 14    variableType -> STRING
Rule 15    variableType -> TRUE
Rule 16    variableType -> FALSE
Rule 17    constDeclaration -> USE CONSTANT IDENTIFIER CONST_ASSIGN variableType
Rule 18    funcDeclaration -> PRINT LEFT_PAR factor RIGHT_PAR
Rule 19    funcDeclaration -> PRINT LEFT_PAR sumLessExpression RIGHT_PAR
Rule 20    sumLessExpression -> variable PLUS_ONE
Rule 21    sumLessExpression -> variable MINUS_ONE
Rule 22    statement -> expression
Rule 23    statement -> conditionalStmt
Rule 24    statement -> loopStmt
Rule 25    conditionalStmt -> matchedif
Rule 26    conditionalStmt -> unmatchedif
Rule 27    matchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE ELSE LEFT_BRACE declarationList RIGHT_BRACE
Rule 28    unmatchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE
Rule 29    loopStmt -> WHILE LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE
Rule 30    expression -> logicalExp
Rule 31    expression -> sumLessExpression
Rule 32    logicalExp -> TRUE OR andExp
Rule 33    logicalExp -> FALSE OR andExp
Rule 34    logicalExp -> andExp
Rule 35    andExp -> TRUE AND compExp
Rule 36    andExp -> FALSE AND compExp
Rule 37    andExp -> compExp
Rule 38    compExp -> sumExp compSign sumExp
Rule 39    compExp -> sumExp
Rule 40    compSign -> LESS_OR_EQUAL
Rule 41    compSign -> LESS_THAN
Rule 42    compSign -> MORE_THAN
Rule 43    compSign -> GREATER_OR_EQUAL
Rule 44    compSign -> EQ
Rule 45    compSign -> NEQ
Rule 46    sumExp -> term sumSign sumExp
Rule 47    sumExp -> term
Rule 48    sumSign -> MINUS
Rule 49    sumSign -> PLUS
Rule 50    term -> multiNegExp multiSign term
Rule 51    term -> multiNegExp
Rule 52    multiSign -> STAR
Rule 53    multiSign -> BETWEEN
Rule 54    multiNegExp -> unaryOp multiNegExp
Rule 55    multiNegExp -> factor
Rule 56    unaryOp -> MINUS
Rule 57    unaryOp -> PLUS
Rule 58    factor -> variable
Rule 59    factor -> variableType
Rule 60    factor -> IDENTIFIER
Rule 61    factor -> LEFT_PAR expression RIGHT_PAR

Terminals, with rules where they appear

AND                  : 35 36
ASSIGN               : 9 10
BETWEEN              : 53
CONSTANT             : 17
CONST_ASSIGN         : 17
DOLLAR               : 8
ELSE                 : 27
EQ                   : 44
FALSE                : 16 33 36
FLOAT                : 13
GREATER_OR_EQUAL     : 43
IDENTIFIER           : 8 17 60
IF                   : 27 28
INTEGER              : 12
LEFT_BRACE           : 27 27 28 29
LEFT_PAR             : 18 19 27 28 29 61
LESS_OR_EQUAL        : 40
LESS_THAN            : 41
MINUS                : 48 56
MINUS_ONE            : 21
MORE_THAN            : 42
NEQ                  : 45
OR                   : 32 33
PLUS                 : 49 57
PLUS_ONE             : 20
PRINT                : 18 19
RIGHT_BRACE          : 27 27 28 29
RIGHT_PAR            : 18 19 27 28 29 61
STAR                 : 52
STDIN                : 10
STRING               : 14
TRUE                 : 15 32 35
USE                  : 17
WHILE                : 29
error                : 

Nonterminals, with rules where they appear

andExp               : 32 33 34
compExp              : 35 36 37
compSign             : 38
conditionalStmt      : 23
constDeclaration     : 6
declaration          : 2 3
declarationList      : 1 2 27 27 28 29
expression           : 22 61
factor               : 18 55
funcDeclaration      : 7
logicalExp           : 27 28 29 30
loopStmt             : 24
matchedif            : 25
multiNegExp          : 50 51 54
multiSign            : 50
number               : 11
program              : 0
statement            : 5
sumExp               : 9 38 38 39 46
sumLessExpression    : 19 31
sumSign              : 46
term                 : 46 47 50
unaryOp              : 54
unmatchedif          : 26
varDeclaration       : 4
variable             : 9 10 20 21 58
variableType         : 17 59

Parsing method: SLR

state 0

    (0) S' -> . program
    (1) program -> . declarationList
    (2) declarationList -> . declaration declarationList
    (3) declarationList -> . declaration
    (4) declaration -> . varDeclaration
    (5) declaration -> . statement
    (6) declaration -> . constDeclaration
    (7) declaration -> . funcDeclaration
    (9) varDeclaration -> . variable ASSIGN sumExp
    (10) varDeclaration -> . variable ASSIGN STDIN
    (22) statement -> . expression
    (23) statement -> . conditionalStmt
    (24) statement -> . loopStmt
    (17) constDeclaration -> . USE CONSTANT IDENTIFIER CONST_ASSIGN variableType
    (18) funcDeclaration -> . PRINT LEFT_PAR factor RIGHT_PAR
    (19) funcDeclaration -> . PRINT LEFT_PAR sumLessExpression RIGHT_PAR
    (8) variable -> . DOLLAR IDENTIFIER
    (30) expression -> . logicalExp
    (31) expression -> . sumLessExpression
    (25) conditionalStmt -> . matchedif
    (26) conditionalStmt -> . unmatchedif
    (29) loopStmt -> . WHILE LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE
    (32) logicalExp -> . TRUE OR andExp
    (33) logicalExp -> . FALSE OR andExp
    (34) logicalExp -> . andExp
    (20) sumLessExpression -> . variable PLUS_ONE
    (21) sumLessExpression -> . variable MINUS_ONE
    (27) matchedif -> . IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE ELSE LEFT_BRACE declarationList RIGHT_BRACE
    (28) unmatchedif -> . IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE
    (35) andExp -> . TRUE AND compExp
    (36) andExp -> . FALSE AND compExp
    (37) andExp -> . compExp
    (38) compExp -> . sumExp compSign sumExp
    (39) compExp -> . sumExp
    (46) sumExp -> . term sumSign sumExp
    (47) sumExp -> . term
    (50) term -> . multiNegExp multiSign term
    (51) term -> . multiNegExp
    (54) multiNegExp -> . unaryOp multiNegExp
    (55) multiNegExp -> . factor
    (56) unaryOp -> . MINUS
    (57) unaryOp -> . PLUS
    (58) factor -> . variable
    (59) factor -> . variableType
    (60) factor -> . IDENTIFIER
    (61) factor -> . LEFT_PAR expression RIGHT_PAR
    (11) variableType -> . number
    (14) variableType -> . STRING
    (15) variableType -> . TRUE
    (16) variableType -> . FALSE
    (12) number -> . INTEGER
    (13) number -> . FLOAT

    USE             shift and go to state 1
    PRINT           shift and go to state 6
    DOLLAR          shift and go to state 24
    WHILE           shift and go to state 5
    TRUE            shift and go to state 13
    FALSE           shift and go to state 30
    IF              shift and go to state 28
    MINUS           shift and go to state 14
    PLUS            shift and go to state 16
    IDENTIFIER      shift and go to state 20
    LEFT_PAR        shift and go to state 36
    STRING          shift and go to state 10
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 32

    varDeclaration                 shift and go to state 2
    variableType                   shift and go to state 7
    matchedif                      shift and go to state 3
    number                         shift and go to state 11
    loopStmt                       shift and go to state 4
    logicalExp                     shift and go to state 8
    multiNegExp                    shift and go to state 9
    conditionalStmt                shift and go to state 12
    program                        shift and go to state 15
    statement                      shift and go to state 17
    factor                         shift and go to state 18
    sumLessExpression              shift and go to state 21
    constDeclaration               shift and go to state 22
    declarationList                shift and go to state 23
    andExp                         shift and go to state 29
    declaration                    shift and go to state 26
    variable                       shift and go to state 27
    term                           shift and go to state 25
    unaryOp                        shift and go to state 31
    compExp                        shift and go to state 33
    sumExp                         shift and go to state 34
    funcDeclaration                shift and go to state 35
    unmatchedif                    shift and go to state 37
    expression                     shift and go to state 38

state 1

    (17) constDeclaration -> USE . CONSTANT IDENTIFIER CONST_ASSIGN variableType

    CONSTANT        shift and go to state 39


state 2

    (4) declaration -> varDeclaration .

    IF              reduce using rule 4 (declaration -> varDeclaration .)
    WHILE           reduce using rule 4 (declaration -> varDeclaration .)
    USE             reduce using rule 4 (declaration -> varDeclaration .)
    DOLLAR          reduce using rule 4 (declaration -> varDeclaration .)
    TRUE            reduce using rule 4 (declaration -> varDeclaration .)
    FALSE           reduce using rule 4 (declaration -> varDeclaration .)
    PRINT           reduce using rule 4 (declaration -> varDeclaration .)
    MINUS           reduce using rule 4 (declaration -> varDeclaration .)
    PLUS            reduce using rule 4 (declaration -> varDeclaration .)
    STRING          reduce using rule 4 (declaration -> varDeclaration .)
    IDENTIFIER      reduce using rule 4 (declaration -> varDeclaration .)
    LEFT_PAR        reduce using rule 4 (declaration -> varDeclaration .)
    INTEGER         reduce using rule 4 (declaration -> varDeclaration .)
    FLOAT           reduce using rule 4 (declaration -> varDeclaration .)
    $end            reduce using rule 4 (declaration -> varDeclaration .)
    RIGHT_BRACE     reduce using rule 4 (declaration -> varDeclaration .)


state 3

    (25) conditionalStmt -> matchedif .

    IF              reduce using rule 25 (conditionalStmt -> matchedif .)
    WHILE           reduce using rule 25 (conditionalStmt -> matchedif .)
    USE             reduce using rule 25 (conditionalStmt -> matchedif .)
    DOLLAR          reduce using rule 25 (conditionalStmt -> matchedif .)
    TRUE            reduce using rule 25 (conditionalStmt -> matchedif .)
    FALSE           reduce using rule 25 (conditionalStmt -> matchedif .)
    PRINT           reduce using rule 25 (conditionalStmt -> matchedif .)
    MINUS           reduce using rule 25 (conditionalStmt -> matchedif .)
    PLUS            reduce using rule 25 (conditionalStmt -> matchedif .)
    STRING          reduce using rule 25 (conditionalStmt -> matchedif .)
    IDENTIFIER      reduce using rule 25 (conditionalStmt -> matchedif .)
    LEFT_PAR        reduce using rule 25 (conditionalStmt -> matchedif .)
    INTEGER         reduce using rule 25 (conditionalStmt -> matchedif .)
    FLOAT           reduce using rule 25 (conditionalStmt -> matchedif .)
    $end            reduce using rule 25 (conditionalStmt -> matchedif .)
    RIGHT_BRACE     reduce using rule 25 (conditionalStmt -> matchedif .)


state 4

    (24) statement -> loopStmt .

    IF              reduce using rule 24 (statement -> loopStmt .)
    WHILE           reduce using rule 24 (statement -> loopStmt .)
    USE             reduce using rule 24 (statement -> loopStmt .)
    DOLLAR          reduce using rule 24 (statement -> loopStmt .)
    TRUE            reduce using rule 24 (statement -> loopStmt .)
    FALSE           reduce using rule 24 (statement -> loopStmt .)
    PRINT           reduce using rule 24 (statement -> loopStmt .)
    MINUS           reduce using rule 24 (statement -> loopStmt .)
    PLUS            reduce using rule 24 (statement -> loopStmt .)
    STRING          reduce using rule 24 (statement -> loopStmt .)
    IDENTIFIER      reduce using rule 24 (statement -> loopStmt .)
    LEFT_PAR        reduce using rule 24 (statement -> loopStmt .)
    INTEGER         reduce using rule 24 (statement -> loopStmt .)
    FLOAT           reduce using rule 24 (statement -> loopStmt .)
    $end            reduce using rule 24 (statement -> loopStmt .)
    RIGHT_BRACE     reduce using rule 24 (statement -> loopStmt .)


state 5

    (29) loopStmt -> WHILE . LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE

    LEFT_PAR        shift and go to state 40


state 6

    (18) funcDeclaration -> PRINT . LEFT_PAR factor RIGHT_PAR
    (19) funcDeclaration -> PRINT . LEFT_PAR sumLessExpression RIGHT_PAR

    LEFT_PAR        shift and go to state 41


state 7

    (59) factor -> variableType .

    RIGHT_PAR       reduce using rule 59 (factor -> variableType .)
    STAR            reduce using rule 59 (factor -> variableType .)
    BETWEEN         reduce using rule 59 (factor -> variableType .)
    MINUS           reduce using rule 59 (factor -> variableType .)
    PLUS            reduce using rule 59 (factor -> variableType .)
    IF              reduce using rule 59 (factor -> variableType .)
    WHILE           reduce using rule 59 (factor -> variableType .)
    USE             reduce using rule 59 (factor -> variableType .)
    DOLLAR          reduce using rule 59 (factor -> variableType .)
    TRUE            reduce using rule 59 (factor -> variableType .)
    FALSE           reduce using rule 59 (factor -> variableType .)
    PRINT           reduce using rule 59 (factor -> variableType .)
    STRING          reduce using rule 59 (factor -> variableType .)
    IDENTIFIER      reduce using rule 59 (factor -> variableType .)
    LEFT_PAR        reduce using rule 59 (factor -> variableType .)
    INTEGER         reduce using rule 59 (factor -> variableType .)
    FLOAT           reduce using rule 59 (factor -> variableType .)
    $end            reduce using rule 59 (factor -> variableType .)
    LESS_OR_EQUAL   reduce using rule 59 (factor -> variableType .)
    LESS_THAN       reduce using rule 59 (factor -> variableType .)
    MORE_THAN       reduce using rule 59 (factor -> variableType .)
    GREATER_OR_EQUAL reduce using rule 59 (factor -> variableType .)
    EQ              reduce using rule 59 (factor -> variableType .)
    NEQ             reduce using rule 59 (factor -> variableType .)
    RIGHT_BRACE     reduce using rule 59 (factor -> variableType .)


state 8

    (30) expression -> logicalExp .

    IF              reduce using rule 30 (expression -> logicalExp .)
    WHILE           reduce using rule 30 (expression -> logicalExp .)
    USE             reduce using rule 30 (expression -> logicalExp .)
    DOLLAR          reduce using rule 30 (expression -> logicalExp .)
    TRUE            reduce using rule 30 (expression -> logicalExp .)
    FALSE           reduce using rule 30 (expression -> logicalExp .)
    PRINT           reduce using rule 30 (expression -> logicalExp .)
    MINUS           reduce using rule 30 (expression -> logicalExp .)
    PLUS            reduce using rule 30 (expression -> logicalExp .)
    STRING          reduce using rule 30 (expression -> logicalExp .)
    IDENTIFIER      reduce using rule 30 (expression -> logicalExp .)
    LEFT_PAR        reduce using rule 30 (expression -> logicalExp .)
    INTEGER         reduce using rule 30 (expression -> logicalExp .)
    FLOAT           reduce using rule 30 (expression -> logicalExp .)
    $end            reduce using rule 30 (expression -> logicalExp .)
    RIGHT_PAR       reduce using rule 30 (expression -> logicalExp .)
    RIGHT_BRACE     reduce using rule 30 (expression -> logicalExp .)


state 9

    (50) term -> multiNegExp . multiSign term
    (51) term -> multiNegExp .
    (52) multiSign -> . STAR
    (53) multiSign -> . BETWEEN

    MINUS           reduce using rule 51 (term -> multiNegExp .)
    PLUS            reduce using rule 51 (term -> multiNegExp .)
    IF              reduce using rule 51 (term -> multiNegExp .)
    WHILE           reduce using rule 51 (term -> multiNegExp .)
    USE             reduce using rule 51 (term -> multiNegExp .)
    DOLLAR          reduce using rule 51 (term -> multiNegExp .)
    TRUE            reduce using rule 51 (term -> multiNegExp .)
    FALSE           reduce using rule 51 (term -> multiNegExp .)
    PRINT           reduce using rule 51 (term -> multiNegExp .)
    STRING          reduce using rule 51 (term -> multiNegExp .)
    IDENTIFIER      reduce using rule 51 (term -> multiNegExp .)
    LEFT_PAR        reduce using rule 51 (term -> multiNegExp .)
    INTEGER         reduce using rule 51 (term -> multiNegExp .)
    FLOAT           reduce using rule 51 (term -> multiNegExp .)
    $end            reduce using rule 51 (term -> multiNegExp .)
    LESS_OR_EQUAL   reduce using rule 51 (term -> multiNegExp .)
    LESS_THAN       reduce using rule 51 (term -> multiNegExp .)
    MORE_THAN       reduce using rule 51 (term -> multiNegExp .)
    GREATER_OR_EQUAL reduce using rule 51 (term -> multiNegExp .)
    EQ              reduce using rule 51 (term -> multiNegExp .)
    NEQ             reduce using rule 51 (term -> multiNegExp .)
    RIGHT_PAR       reduce using rule 51 (term -> multiNegExp .)
    RIGHT_BRACE     reduce using rule 51 (term -> multiNegExp .)
    STAR            shift and go to state 43
    BETWEEN         shift and go to state 42

    multiSign                      shift and go to state 44

state 10

    (14) variableType -> STRING .

    IF              reduce using rule 14 (variableType -> STRING .)
    WHILE           reduce using rule 14 (variableType -> STRING .)
    USE             reduce using rule 14 (variableType -> STRING .)
    DOLLAR          reduce using rule 14 (variableType -> STRING .)
    TRUE            reduce using rule 14 (variableType -> STRING .)
    FALSE           reduce using rule 14 (variableType -> STRING .)
    PRINT           reduce using rule 14 (variableType -> STRING .)
    MINUS           reduce using rule 14 (variableType -> STRING .)
    PLUS            reduce using rule 14 (variableType -> STRING .)
    STRING          reduce using rule 14 (variableType -> STRING .)
    IDENTIFIER      reduce using rule 14 (variableType -> STRING .)
    LEFT_PAR        reduce using rule 14 (variableType -> STRING .)
    INTEGER         reduce using rule 14 (variableType -> STRING .)
    FLOAT           reduce using rule 14 (variableType -> STRING .)
    $end            reduce using rule 14 (variableType -> STRING .)
    RIGHT_PAR       reduce using rule 14 (variableType -> STRING .)
    STAR            reduce using rule 14 (variableType -> STRING .)
    BETWEEN         reduce using rule 14 (variableType -> STRING .)
    LESS_OR_EQUAL   reduce using rule 14 (variableType -> STRING .)
    LESS_THAN       reduce using rule 14 (variableType -> STRING .)
    MORE_THAN       reduce using rule 14 (variableType -> STRING .)
    GREATER_OR_EQUAL reduce using rule 14 (variableType -> STRING .)
    EQ              reduce using rule 14 (variableType -> STRING .)
    NEQ             reduce using rule 14 (variableType -> STRING .)
    RIGHT_BRACE     reduce using rule 14 (variableType -> STRING .)


state 11

    (11) variableType -> number .

    IF              reduce using rule 11 (variableType -> number .)
    WHILE           reduce using rule 11 (variableType -> number .)
    USE             reduce using rule 11 (variableType -> number .)
    DOLLAR          reduce using rule 11 (variableType -> number .)
    TRUE            reduce using rule 11 (variableType -> number .)
    FALSE           reduce using rule 11 (variableType -> number .)
    PRINT           reduce using rule 11 (variableType -> number .)
    MINUS           reduce using rule 11 (variableType -> number .)
    PLUS            reduce using rule 11 (variableType -> number .)
    STRING          reduce using rule 11 (variableType -> number .)
    IDENTIFIER      reduce using rule 11 (variableType -> number .)
    LEFT_PAR        reduce using rule 11 (variableType -> number .)
    INTEGER         reduce using rule 11 (variableType -> number .)
    FLOAT           reduce using rule 11 (variableType -> number .)
    $end            reduce using rule 11 (variableType -> number .)
    RIGHT_PAR       reduce using rule 11 (variableType -> number .)
    STAR            reduce using rule 11 (variableType -> number .)
    BETWEEN         reduce using rule 11 (variableType -> number .)
    LESS_OR_EQUAL   reduce using rule 11 (variableType -> number .)
    LESS_THAN       reduce using rule 11 (variableType -> number .)
    MORE_THAN       reduce using rule 11 (variableType -> number .)
    GREATER_OR_EQUAL reduce using rule 11 (variableType -> number .)
    EQ              reduce using rule 11 (variableType -> number .)
    NEQ             reduce using rule 11 (variableType -> number .)
    RIGHT_BRACE     reduce using rule 11 (variableType -> number .)


state 12

    (23) statement -> conditionalStmt .

    IF              reduce using rule 23 (statement -> conditionalStmt .)
    WHILE           reduce using rule 23 (statement -> conditionalStmt .)
    USE             reduce using rule 23 (statement -> conditionalStmt .)
    DOLLAR          reduce using rule 23 (statement -> conditionalStmt .)
    TRUE            reduce using rule 23 (statement -> conditionalStmt .)
    FALSE           reduce using rule 23 (statement -> conditionalStmt .)
    PRINT           reduce using rule 23 (statement -> conditionalStmt .)
    MINUS           reduce using rule 23 (statement -> conditionalStmt .)
    PLUS            reduce using rule 23 (statement -> conditionalStmt .)
    STRING          reduce using rule 23 (statement -> conditionalStmt .)
    IDENTIFIER      reduce using rule 23 (statement -> conditionalStmt .)
    LEFT_PAR        reduce using rule 23 (statement -> conditionalStmt .)
    INTEGER         reduce using rule 23 (statement -> conditionalStmt .)
    FLOAT           reduce using rule 23 (statement -> conditionalStmt .)
    $end            reduce using rule 23 (statement -> conditionalStmt .)
    RIGHT_BRACE     reduce using rule 23 (statement -> conditionalStmt .)


state 13

    (32) logicalExp -> TRUE . OR andExp
    (35) andExp -> TRUE . AND compExp
    (15) variableType -> TRUE .

    OR              shift and go to state 46
    AND             shift and go to state 45
    IF              reduce using rule 15 (variableType -> TRUE .)
    WHILE           reduce using rule 15 (variableType -> TRUE .)
    USE             reduce using rule 15 (variableType -> TRUE .)
    DOLLAR          reduce using rule 15 (variableType -> TRUE .)
    TRUE            reduce using rule 15 (variableType -> TRUE .)
    FALSE           reduce using rule 15 (variableType -> TRUE .)
    PRINT           reduce using rule 15 (variableType -> TRUE .)
    MINUS           reduce using rule 15 (variableType -> TRUE .)
    PLUS            reduce using rule 15 (variableType -> TRUE .)
    STRING          reduce using rule 15 (variableType -> TRUE .)
    IDENTIFIER      reduce using rule 15 (variableType -> TRUE .)
    LEFT_PAR        reduce using rule 15 (variableType -> TRUE .)
    INTEGER         reduce using rule 15 (variableType -> TRUE .)
    FLOAT           reduce using rule 15 (variableType -> TRUE .)
    $end            reduce using rule 15 (variableType -> TRUE .)
    RIGHT_PAR       reduce using rule 15 (variableType -> TRUE .)
    STAR            reduce using rule 15 (variableType -> TRUE .)
    BETWEEN         reduce using rule 15 (variableType -> TRUE .)
    LESS_OR_EQUAL   reduce using rule 15 (variableType -> TRUE .)
    LESS_THAN       reduce using rule 15 (variableType -> TRUE .)
    MORE_THAN       reduce using rule 15 (variableType -> TRUE .)
    GREATER_OR_EQUAL reduce using rule 15 (variableType -> TRUE .)
    EQ              reduce using rule 15 (variableType -> TRUE .)
    NEQ             reduce using rule 15 (variableType -> TRUE .)
    RIGHT_BRACE     reduce using rule 15 (variableType -> TRUE .)


state 14

    (56) unaryOp -> MINUS .

    MINUS           reduce using rule 56 (unaryOp -> MINUS .)
    PLUS            reduce using rule 56 (unaryOp -> MINUS .)
    STRING          reduce using rule 56 (unaryOp -> MINUS .)
    TRUE            reduce using rule 56 (unaryOp -> MINUS .)
    FALSE           reduce using rule 56 (unaryOp -> MINUS .)
    IDENTIFIER      reduce using rule 56 (unaryOp -> MINUS .)
    LEFT_PAR        reduce using rule 56 (unaryOp -> MINUS .)
    DOLLAR          reduce using rule 56 (unaryOp -> MINUS .)
    INTEGER         reduce using rule 56 (unaryOp -> MINUS .)
    FLOAT           reduce using rule 56 (unaryOp -> MINUS .)


state 15

    (0) S' -> program .



state 16

    (57) unaryOp -> PLUS .

    MINUS           reduce using rule 57 (unaryOp -> PLUS .)
    PLUS            reduce using rule 57 (unaryOp -> PLUS .)
    STRING          reduce using rule 57 (unaryOp -> PLUS .)
    TRUE            reduce using rule 57 (unaryOp -> PLUS .)
    FALSE           reduce using rule 57 (unaryOp -> PLUS .)
    IDENTIFIER      reduce using rule 57 (unaryOp -> PLUS .)
    LEFT_PAR        reduce using rule 57 (unaryOp -> PLUS .)
    DOLLAR          reduce using rule 57 (unaryOp -> PLUS .)
    INTEGER         reduce using rule 57 (unaryOp -> PLUS .)
    FLOAT           reduce using rule 57 (unaryOp -> PLUS .)


state 17

    (5) declaration -> statement .

    IF              reduce using rule 5 (declaration -> statement .)
    WHILE           reduce using rule 5 (declaration -> statement .)
    USE             reduce using rule 5 (declaration -> statement .)
    DOLLAR          reduce using rule 5 (declaration -> statement .)
    TRUE            reduce using rule 5 (declaration -> statement .)
    FALSE           reduce using rule 5 (declaration -> statement .)
    PRINT           reduce using rule 5 (declaration -> statement .)
    MINUS           reduce using rule 5 (declaration -> statement .)
    PLUS            reduce using rule 5 (declaration -> statement .)
    STRING          reduce using rule 5 (declaration -> statement .)
    IDENTIFIER      reduce using rule 5 (declaration -> statement .)
    LEFT_PAR        reduce using rule 5 (declaration -> statement .)
    INTEGER         reduce using rule 5 (declaration -> statement .)
    FLOAT           reduce using rule 5 (declaration -> statement .)
    $end            reduce using rule 5 (declaration -> statement .)
    RIGHT_BRACE     reduce using rule 5 (declaration -> statement .)


state 18

    (55) multiNegExp -> factor .

    STAR            reduce using rule 55 (multiNegExp -> factor .)
    BETWEEN         reduce using rule 55 (multiNegExp -> factor .)
    MINUS           reduce using rule 55 (multiNegExp -> factor .)
    PLUS            reduce using rule 55 (multiNegExp -> factor .)
    IF              reduce using rule 55 (multiNegExp -> factor .)
    WHILE           reduce using rule 55 (multiNegExp -> factor .)
    USE             reduce using rule 55 (multiNegExp -> factor .)
    DOLLAR          reduce using rule 55 (multiNegExp -> factor .)
    TRUE            reduce using rule 55 (multiNegExp -> factor .)
    FALSE           reduce using rule 55 (multiNegExp -> factor .)
    PRINT           reduce using rule 55 (multiNegExp -> factor .)
    STRING          reduce using rule 55 (multiNegExp -> factor .)
    IDENTIFIER      reduce using rule 55 (multiNegExp -> factor .)
    LEFT_PAR        reduce using rule 55 (multiNegExp -> factor .)
    INTEGER         reduce using rule 55 (multiNegExp -> factor .)
    FLOAT           reduce using rule 55 (multiNegExp -> factor .)
    $end            reduce using rule 55 (multiNegExp -> factor .)
    LESS_OR_EQUAL   reduce using rule 55 (multiNegExp -> factor .)
    LESS_THAN       reduce using rule 55 (multiNegExp -> factor .)
    MORE_THAN       reduce using rule 55 (multiNegExp -> factor .)
    GREATER_OR_EQUAL reduce using rule 55 (multiNegExp -> factor .)
    EQ              reduce using rule 55 (multiNegExp -> factor .)
    NEQ             reduce using rule 55 (multiNegExp -> factor .)
    RIGHT_PAR       reduce using rule 55 (multiNegExp -> factor .)
    RIGHT_BRACE     reduce using rule 55 (multiNegExp -> factor .)


state 19

    (12) number -> INTEGER .

    IF              reduce using rule 12 (number -> INTEGER .)
    WHILE           reduce using rule 12 (number -> INTEGER .)
    USE             reduce using rule 12 (number -> INTEGER .)
    DOLLAR          reduce using rule 12 (number -> INTEGER .)
    TRUE            reduce using rule 12 (number -> INTEGER .)
    FALSE           reduce using rule 12 (number -> INTEGER .)
    PRINT           reduce using rule 12 (number -> INTEGER .)
    MINUS           reduce using rule 12 (number -> INTEGER .)
    PLUS            reduce using rule 12 (number -> INTEGER .)
    STRING          reduce using rule 12 (number -> INTEGER .)
    IDENTIFIER      reduce using rule 12 (number -> INTEGER .)
    LEFT_PAR        reduce using rule 12 (number -> INTEGER .)
    INTEGER         reduce using rule 12 (number -> INTEGER .)
    FLOAT           reduce using rule 12 (number -> INTEGER .)
    $end            reduce using rule 12 (number -> INTEGER .)
    RIGHT_PAR       reduce using rule 12 (number -> INTEGER .)
    STAR            reduce using rule 12 (number -> INTEGER .)
    BETWEEN         reduce using rule 12 (number -> INTEGER .)
    LESS_OR_EQUAL   reduce using rule 12 (number -> INTEGER .)
    LESS_THAN       reduce using rule 12 (number -> INTEGER .)
    MORE_THAN       reduce using rule 12 (number -> INTEGER .)
    GREATER_OR_EQUAL reduce using rule 12 (number -> INTEGER .)
    EQ              reduce using rule 12 (number -> INTEGER .)
    NEQ             reduce using rule 12 (number -> INTEGER .)
    RIGHT_BRACE     reduce using rule 12 (number -> INTEGER .)


state 20

    (60) factor -> IDENTIFIER .

    RIGHT_PAR       reduce using rule 60 (factor -> IDENTIFIER .)
    STAR            reduce using rule 60 (factor -> IDENTIFIER .)
    BETWEEN         reduce using rule 60 (factor -> IDENTIFIER .)
    MINUS           reduce using rule 60 (factor -> IDENTIFIER .)
    PLUS            reduce using rule 60 (factor -> IDENTIFIER .)
    IF              reduce using rule 60 (factor -> IDENTIFIER .)
    WHILE           reduce using rule 60 (factor -> IDENTIFIER .)
    USE             reduce using rule 60 (factor -> IDENTIFIER .)
    DOLLAR          reduce using rule 60 (factor -> IDENTIFIER .)
    TRUE            reduce using rule 60 (factor -> IDENTIFIER .)
    FALSE           reduce using rule 60 (factor -> IDENTIFIER .)
    PRINT           reduce using rule 60 (factor -> IDENTIFIER .)
    STRING          reduce using rule 60 (factor -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 60 (factor -> IDENTIFIER .)
    LEFT_PAR        reduce using rule 60 (factor -> IDENTIFIER .)
    INTEGER         reduce using rule 60 (factor -> IDENTIFIER .)
    FLOAT           reduce using rule 60 (factor -> IDENTIFIER .)
    $end            reduce using rule 60 (factor -> IDENTIFIER .)
    LESS_OR_EQUAL   reduce using rule 60 (factor -> IDENTIFIER .)
    LESS_THAN       reduce using rule 60 (factor -> IDENTIFIER .)
    MORE_THAN       reduce using rule 60 (factor -> IDENTIFIER .)
    GREATER_OR_EQUAL reduce using rule 60 (factor -> IDENTIFIER .)
    EQ              reduce using rule 60 (factor -> IDENTIFIER .)
    NEQ             reduce using rule 60 (factor -> IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 60 (factor -> IDENTIFIER .)


state 21

    (31) expression -> sumLessExpression .

    IF              reduce using rule 31 (expression -> sumLessExpression .)
    WHILE           reduce using rule 31 (expression -> sumLessExpression .)
    USE             reduce using rule 31 (expression -> sumLessExpression .)
    DOLLAR          reduce using rule 31 (expression -> sumLessExpression .)
    TRUE            reduce using rule 31 (expression -> sumLessExpression .)
    FALSE           reduce using rule 31 (expression -> sumLessExpression .)
    PRINT           reduce using rule 31 (expression -> sumLessExpression .)
    MINUS           reduce using rule 31 (expression -> sumLessExpression .)
    PLUS            reduce using rule 31 (expression -> sumLessExpression .)
    STRING          reduce using rule 31 (expression -> sumLessExpression .)
    IDENTIFIER      reduce using rule 31 (expression -> sumLessExpression .)
    LEFT_PAR        reduce using rule 31 (expression -> sumLessExpression .)
    INTEGER         reduce using rule 31 (expression -> sumLessExpression .)
    FLOAT           reduce using rule 31 (expression -> sumLessExpression .)
    $end            reduce using rule 31 (expression -> sumLessExpression .)
    RIGHT_PAR       reduce using rule 31 (expression -> sumLessExpression .)
    RIGHT_BRACE     reduce using rule 31 (expression -> sumLessExpression .)


state 22

    (6) declaration -> constDeclaration .

    IF              reduce using rule 6 (declaration -> constDeclaration .)
    WHILE           reduce using rule 6 (declaration -> constDeclaration .)
    USE             reduce using rule 6 (declaration -> constDeclaration .)
    DOLLAR          reduce using rule 6 (declaration -> constDeclaration .)
    TRUE            reduce using rule 6 (declaration -> constDeclaration .)
    FALSE           reduce using rule 6 (declaration -> constDeclaration .)
    PRINT           reduce using rule 6 (declaration -> constDeclaration .)
    MINUS           reduce using rule 6 (declaration -> constDeclaration .)
    PLUS            reduce using rule 6 (declaration -> constDeclaration .)
    STRING          reduce using rule 6 (declaration -> constDeclaration .)
    IDENTIFIER      reduce using rule 6 (declaration -> constDeclaration .)
    LEFT_PAR        reduce using rule 6 (declaration -> constDeclaration .)
    INTEGER         reduce using rule 6 (declaration -> constDeclaration .)
    FLOAT           reduce using rule 6 (declaration -> constDeclaration .)
    $end            reduce using rule 6 (declaration -> constDeclaration .)
    RIGHT_BRACE     reduce using rule 6 (declaration -> constDeclaration .)


state 23

    (1) program -> declarationList .

    $end            reduce using rule 1 (program -> declarationList .)


state 24

    (8) variable -> DOLLAR . IDENTIFIER

    IDENTIFIER      shift and go to state 47


state 25

    (46) sumExp -> term . sumSign sumExp
    (47) sumExp -> term .
    (48) sumSign -> . MINUS
    (49) sumSign -> . PLUS

  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
    IF              reduce using rule 47 (sumExp -> term .)
    WHILE           reduce using rule 47 (sumExp -> term .)
    USE             reduce using rule 47 (sumExp -> term .)
    DOLLAR          reduce using rule 47 (sumExp -> term .)
    TRUE            reduce using rule 47 (sumExp -> term .)
    FALSE           reduce using rule 47 (sumExp -> term .)
    PRINT           reduce using rule 47 (sumExp -> term .)
    STRING          reduce using rule 47 (sumExp -> term .)
    IDENTIFIER      reduce using rule 47 (sumExp -> term .)
    LEFT_PAR        reduce using rule 47 (sumExp -> term .)
    INTEGER         reduce using rule 47 (sumExp -> term .)
    FLOAT           reduce using rule 47 (sumExp -> term .)
    $end            reduce using rule 47 (sumExp -> term .)
    LESS_OR_EQUAL   reduce using rule 47 (sumExp -> term .)
    LESS_THAN       reduce using rule 47 (sumExp -> term .)
    MORE_THAN       reduce using rule 47 (sumExp -> term .)
    GREATER_OR_EQUAL reduce using rule 47 (sumExp -> term .)
    EQ              reduce using rule 47 (sumExp -> term .)
    NEQ             reduce using rule 47 (sumExp -> term .)
    RIGHT_PAR       reduce using rule 47 (sumExp -> term .)
    RIGHT_BRACE     reduce using rule 47 (sumExp -> term .)
    MINUS           shift and go to state 50
    PLUS            shift and go to state 48

  ! MINUS           [ reduce using rule 47 (sumExp -> term .) ]
  ! PLUS            [ reduce using rule 47 (sumExp -> term .) ]

    sumSign                        shift and go to state 49

state 26

    (2) declarationList -> declaration . declarationList
    (3) declarationList -> declaration .
    (2) declarationList -> . declaration declarationList
    (3) declarationList -> . declaration
    (4) declaration -> . varDeclaration
    (5) declaration -> . statement
    (6) declaration -> . constDeclaration
    (7) declaration -> . funcDeclaration
    (9) varDeclaration -> . variable ASSIGN sumExp
    (10) varDeclaration -> . variable ASSIGN STDIN
    (22) statement -> . expression
    (23) statement -> . conditionalStmt
    (24) statement -> . loopStmt
    (17) constDeclaration -> . USE CONSTANT IDENTIFIER CONST_ASSIGN variableType
    (18) funcDeclaration -> . PRINT LEFT_PAR factor RIGHT_PAR
    (19) funcDeclaration -> . PRINT LEFT_PAR sumLessExpression RIGHT_PAR
    (8) variable -> . DOLLAR IDENTIFIER
    (30) expression -> . logicalExp
    (31) expression -> . sumLessExpression
    (25) conditionalStmt -> . matchedif
    (26) conditionalStmt -> . unmatchedif
    (29) loopStmt -> . WHILE LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE
    (32) logicalExp -> . TRUE OR andExp
    (33) logicalExp -> . FALSE OR andExp
    (34) logicalExp -> . andExp
    (20) sumLessExpression -> . variable PLUS_ONE
    (21) sumLessExpression -> . variable MINUS_ONE
    (27) matchedif -> . IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE ELSE LEFT_BRACE declarationList RIGHT_BRACE
    (28) unmatchedif -> . IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE
    (35) andExp -> . TRUE AND compExp
    (36) andExp -> . FALSE AND compExp
    (37) andExp -> . compExp
    (38) compExp -> . sumExp compSign sumExp
    (39) compExp -> . sumExp
    (46) sumExp -> . term sumSign sumExp
    (47) sumExp -> . term
    (50) term -> . multiNegExp multiSign term
    (51) term -> . multiNegExp
    (54) multiNegExp -> . unaryOp multiNegExp
    (55) multiNegExp -> . factor
    (56) unaryOp -> . MINUS
    (57) unaryOp -> . PLUS
    (58) factor -> . variable
    (59) factor -> . variableType
    (60) factor -> . IDENTIFIER
    (61) factor -> . LEFT_PAR expression RIGHT_PAR
    (11) variableType -> . number
    (14) variableType -> . STRING
    (15) variableType -> . TRUE
    (16) variableType -> . FALSE
    (12) number -> . INTEGER
    (13) number -> . FLOAT

    $end            reduce using rule 3 (declarationList -> declaration .)
    RIGHT_BRACE     reduce using rule 3 (declarationList -> declaration .)
    USE             shift and go to state 1
    PRINT           shift and go to state 6
    DOLLAR          shift and go to state 24
    WHILE           shift and go to state 5
    TRUE            shift and go to state 13
    FALSE           shift and go to state 30
    IF              shift and go to state 28
    MINUS           shift and go to state 14
    PLUS            shift and go to state 16
    IDENTIFIER      shift and go to state 20
    LEFT_PAR        shift and go to state 36
    STRING          shift and go to state 10
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 32

    varDeclaration                 shift and go to state 2
    variableType                   shift and go to state 7
    matchedif                      shift and go to state 3
    number                         shift and go to state 11
    loopStmt                       shift and go to state 4
    logicalExp                     shift and go to state 8
    multiNegExp                    shift and go to state 9
    conditionalStmt                shift and go to state 12
    statement                      shift and go to state 17
    factor                         shift and go to state 18
    sumLessExpression              shift and go to state 21
    constDeclaration               shift and go to state 22
    declarationList                shift and go to state 51
    andExp                         shift and go to state 29
    declaration                    shift and go to state 26
    variable                       shift and go to state 27
    term                           shift and go to state 25
    unaryOp                        shift and go to state 31
    compExp                        shift and go to state 33
    sumExp                         shift and go to state 34
    funcDeclaration                shift and go to state 35
    unmatchedif                    shift and go to state 37
    expression                     shift and go to state 38

state 27

    (9) varDeclaration -> variable . ASSIGN sumExp
    (10) varDeclaration -> variable . ASSIGN STDIN
    (20) sumLessExpression -> variable . PLUS_ONE
    (21) sumLessExpression -> variable . MINUS_ONE
    (58) factor -> variable .

    ASSIGN          shift and go to state 54
    PLUS_ONE        shift and go to state 52
    MINUS_ONE       shift and go to state 53
    RIGHT_PAR       reduce using rule 58 (factor -> variable .)
    STAR            reduce using rule 58 (factor -> variable .)
    BETWEEN         reduce using rule 58 (factor -> variable .)
    MINUS           reduce using rule 58 (factor -> variable .)
    PLUS            reduce using rule 58 (factor -> variable .)
    IF              reduce using rule 58 (factor -> variable .)
    WHILE           reduce using rule 58 (factor -> variable .)
    USE             reduce using rule 58 (factor -> variable .)
    DOLLAR          reduce using rule 58 (factor -> variable .)
    TRUE            reduce using rule 58 (factor -> variable .)
    FALSE           reduce using rule 58 (factor -> variable .)
    PRINT           reduce using rule 58 (factor -> variable .)
    STRING          reduce using rule 58 (factor -> variable .)
    IDENTIFIER      reduce using rule 58 (factor -> variable .)
    LEFT_PAR        reduce using rule 58 (factor -> variable .)
    INTEGER         reduce using rule 58 (factor -> variable .)
    FLOAT           reduce using rule 58 (factor -> variable .)
    $end            reduce using rule 58 (factor -> variable .)
    LESS_OR_EQUAL   reduce using rule 58 (factor -> variable .)
    LESS_THAN       reduce using rule 58 (factor -> variable .)
    MORE_THAN       reduce using rule 58 (factor -> variable .)
    GREATER_OR_EQUAL reduce using rule 58 (factor -> variable .)
    EQ              reduce using rule 58 (factor -> variable .)
    NEQ             reduce using rule 58 (factor -> variable .)
    RIGHT_BRACE     reduce using rule 58 (factor -> variable .)


state 28

    (27) matchedif -> IF . LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE ELSE LEFT_BRACE declarationList RIGHT_BRACE
    (28) unmatchedif -> IF . LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE

    LEFT_PAR        shift and go to state 55


state 29

    (34) logicalExp -> andExp .

    RIGHT_PAR       reduce using rule 34 (logicalExp -> andExp .)
    IF              reduce using rule 34 (logicalExp -> andExp .)
    WHILE           reduce using rule 34 (logicalExp -> andExp .)
    USE             reduce using rule 34 (logicalExp -> andExp .)
    DOLLAR          reduce using rule 34 (logicalExp -> andExp .)
    TRUE            reduce using rule 34 (logicalExp -> andExp .)
    FALSE           reduce using rule 34 (logicalExp -> andExp .)
    PRINT           reduce using rule 34 (logicalExp -> andExp .)
    MINUS           reduce using rule 34 (logicalExp -> andExp .)
    PLUS            reduce using rule 34 (logicalExp -> andExp .)
    STRING          reduce using rule 34 (logicalExp -> andExp .)
    IDENTIFIER      reduce using rule 34 (logicalExp -> andExp .)
    LEFT_PAR        reduce using rule 34 (logicalExp -> andExp .)
    INTEGER         reduce using rule 34 (logicalExp -> andExp .)
    FLOAT           reduce using rule 34 (logicalExp -> andExp .)
    $end            reduce using rule 34 (logicalExp -> andExp .)
    RIGHT_BRACE     reduce using rule 34 (logicalExp -> andExp .)


state 30

    (33) logicalExp -> FALSE . OR andExp
    (36) andExp -> FALSE . AND compExp
    (16) variableType -> FALSE .

    OR              shift and go to state 57
    AND             shift and go to state 56
    IF              reduce using rule 16 (variableType -> FALSE .)
    WHILE           reduce using rule 16 (variableType -> FALSE .)
    USE             reduce using rule 16 (variableType -> FALSE .)
    DOLLAR          reduce using rule 16 (variableType -> FALSE .)
    TRUE            reduce using rule 16 (variableType -> FALSE .)
    FALSE           reduce using rule 16 (variableType -> FALSE .)
    PRINT           reduce using rule 16 (variableType -> FALSE .)
    MINUS           reduce using rule 16 (variableType -> FALSE .)
    PLUS            reduce using rule 16 (variableType -> FALSE .)
    STRING          reduce using rule 16 (variableType -> FALSE .)
    IDENTIFIER      reduce using rule 16 (variableType -> FALSE .)
    LEFT_PAR        reduce using rule 16 (variableType -> FALSE .)
    INTEGER         reduce using rule 16 (variableType -> FALSE .)
    FLOAT           reduce using rule 16 (variableType -> FALSE .)
    $end            reduce using rule 16 (variableType -> FALSE .)
    RIGHT_PAR       reduce using rule 16 (variableType -> FALSE .)
    STAR            reduce using rule 16 (variableType -> FALSE .)
    BETWEEN         reduce using rule 16 (variableType -> FALSE .)
    LESS_OR_EQUAL   reduce using rule 16 (variableType -> FALSE .)
    LESS_THAN       reduce using rule 16 (variableType -> FALSE .)
    MORE_THAN       reduce using rule 16 (variableType -> FALSE .)
    GREATER_OR_EQUAL reduce using rule 16 (variableType -> FALSE .)
    EQ              reduce using rule 16 (variableType -> FALSE .)
    NEQ             reduce using rule 16 (variableType -> FALSE .)
    RIGHT_BRACE     reduce using rule 16 (variableType -> FALSE .)


state 31

    (54) multiNegExp -> unaryOp . multiNegExp
    (54) multiNegExp -> . unaryOp multiNegExp
    (55) multiNegExp -> . factor
    (56) unaryOp -> . MINUS
    (57) unaryOp -> . PLUS
    (58) factor -> . variable
    (59) factor -> . variableType
    (60) factor -> . IDENTIFIER
    (61) factor -> . LEFT_PAR expression RIGHT_PAR
    (8) variable -> . DOLLAR IDENTIFIER
    (11) variableType -> . number
    (14) variableType -> . STRING
    (15) variableType -> . TRUE
    (16) variableType -> . FALSE
    (12) number -> . INTEGER
    (13) number -> . FLOAT

    MINUS           shift and go to state 14
    PLUS            shift and go to state 16
    IDENTIFIER      shift and go to state 20
    LEFT_PAR        shift and go to state 36
    DOLLAR          shift and go to state 24
    STRING          shift and go to state 10
    TRUE            shift and go to state 58
    FALSE           shift and go to state 61
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 32

    variableType                   shift and go to state 7
    unaryOp                        shift and go to state 31
    multiNegExp                    shift and go to state 59
    number                         shift and go to state 11
    factor                         shift and go to state 18
    variable                       shift and go to state 60

state 32

    (13) number -> FLOAT .

    IF              reduce using rule 13 (number -> FLOAT .)
    WHILE           reduce using rule 13 (number -> FLOAT .)
    USE             reduce using rule 13 (number -> FLOAT .)
    DOLLAR          reduce using rule 13 (number -> FLOAT .)
    TRUE            reduce using rule 13 (number -> FLOAT .)
    FALSE           reduce using rule 13 (number -> FLOAT .)
    PRINT           reduce using rule 13 (number -> FLOAT .)
    MINUS           reduce using rule 13 (number -> FLOAT .)
    PLUS            reduce using rule 13 (number -> FLOAT .)
    STRING          reduce using rule 13 (number -> FLOAT .)
    IDENTIFIER      reduce using rule 13 (number -> FLOAT .)
    LEFT_PAR        reduce using rule 13 (number -> FLOAT .)
    INTEGER         reduce using rule 13 (number -> FLOAT .)
    FLOAT           reduce using rule 13 (number -> FLOAT .)
    $end            reduce using rule 13 (number -> FLOAT .)
    RIGHT_PAR       reduce using rule 13 (number -> FLOAT .)
    STAR            reduce using rule 13 (number -> FLOAT .)
    BETWEEN         reduce using rule 13 (number -> FLOAT .)
    LESS_OR_EQUAL   reduce using rule 13 (number -> FLOAT .)
    LESS_THAN       reduce using rule 13 (number -> FLOAT .)
    MORE_THAN       reduce using rule 13 (number -> FLOAT .)
    GREATER_OR_EQUAL reduce using rule 13 (number -> FLOAT .)
    EQ              reduce using rule 13 (number -> FLOAT .)
    NEQ             reduce using rule 13 (number -> FLOAT .)
    RIGHT_BRACE     reduce using rule 13 (number -> FLOAT .)


state 33

    (37) andExp -> compExp .

    RIGHT_PAR       reduce using rule 37 (andExp -> compExp .)
    IF              reduce using rule 37 (andExp -> compExp .)
    WHILE           reduce using rule 37 (andExp -> compExp .)
    USE             reduce using rule 37 (andExp -> compExp .)
    DOLLAR          reduce using rule 37 (andExp -> compExp .)
    TRUE            reduce using rule 37 (andExp -> compExp .)
    FALSE           reduce using rule 37 (andExp -> compExp .)
    PRINT           reduce using rule 37 (andExp -> compExp .)
    MINUS           reduce using rule 37 (andExp -> compExp .)
    PLUS            reduce using rule 37 (andExp -> compExp .)
    STRING          reduce using rule 37 (andExp -> compExp .)
    IDENTIFIER      reduce using rule 37 (andExp -> compExp .)
    LEFT_PAR        reduce using rule 37 (andExp -> compExp .)
    INTEGER         reduce using rule 37 (andExp -> compExp .)
    FLOAT           reduce using rule 37 (andExp -> compExp .)
    $end            reduce using rule 37 (andExp -> compExp .)
    RIGHT_BRACE     reduce using rule 37 (andExp -> compExp .)


state 34

    (38) compExp -> sumExp . compSign sumExp
    (39) compExp -> sumExp .
    (40) compSign -> . LESS_OR_EQUAL
    (41) compSign -> . LESS_THAN
    (42) compSign -> . MORE_THAN
    (43) compSign -> . GREATER_OR_EQUAL
    (44) compSign -> . EQ
    (45) compSign -> . NEQ

    RIGHT_PAR       reduce using rule 39 (compExp -> sumExp .)
    IF              reduce using rule 39 (compExp -> sumExp .)
    WHILE           reduce using rule 39 (compExp -> sumExp .)
    USE             reduce using rule 39 (compExp -> sumExp .)
    DOLLAR          reduce using rule 39 (compExp -> sumExp .)
    TRUE            reduce using rule 39 (compExp -> sumExp .)
    FALSE           reduce using rule 39 (compExp -> sumExp .)
    PRINT           reduce using rule 39 (compExp -> sumExp .)
    MINUS           reduce using rule 39 (compExp -> sumExp .)
    PLUS            reduce using rule 39 (compExp -> sumExp .)
    STRING          reduce using rule 39 (compExp -> sumExp .)
    IDENTIFIER      reduce using rule 39 (compExp -> sumExp .)
    LEFT_PAR        reduce using rule 39 (compExp -> sumExp .)
    INTEGER         reduce using rule 39 (compExp -> sumExp .)
    FLOAT           reduce using rule 39 (compExp -> sumExp .)
    $end            reduce using rule 39 (compExp -> sumExp .)
    RIGHT_BRACE     reduce using rule 39 (compExp -> sumExp .)
    LESS_OR_EQUAL   shift and go to state 63
    LESS_THAN       shift and go to state 66
    MORE_THAN       shift and go to state 62
    GREATER_OR_EQUAL shift and go to state 64
    EQ              shift and go to state 67
    NEQ             shift and go to state 68

    compSign                       shift and go to state 65

state 35

    (7) declaration -> funcDeclaration .

    IF              reduce using rule 7 (declaration -> funcDeclaration .)
    WHILE           reduce using rule 7 (declaration -> funcDeclaration .)
    USE             reduce using rule 7 (declaration -> funcDeclaration .)
    DOLLAR          reduce using rule 7 (declaration -> funcDeclaration .)
    TRUE            reduce using rule 7 (declaration -> funcDeclaration .)
    FALSE           reduce using rule 7 (declaration -> funcDeclaration .)
    PRINT           reduce using rule 7 (declaration -> funcDeclaration .)
    MINUS           reduce using rule 7 (declaration -> funcDeclaration .)
    PLUS            reduce using rule 7 (declaration -> funcDeclaration .)
    STRING          reduce using rule 7 (declaration -> funcDeclaration .)
    IDENTIFIER      reduce using rule 7 (declaration -> funcDeclaration .)
    LEFT_PAR        reduce using rule 7 (declaration -> funcDeclaration .)
    INTEGER         reduce using rule 7 (declaration -> funcDeclaration .)
    FLOAT           reduce using rule 7 (declaration -> funcDeclaration .)
    $end            reduce using rule 7 (declaration -> funcDeclaration .)
    RIGHT_BRACE     reduce using rule 7 (declaration -> funcDeclaration .)


state 36

    (61) factor -> LEFT_PAR . expression RIGHT_PAR
    (30) expression -> . logicalExp
    (31) expression -> . sumLessExpression
    (32) logicalExp -> . TRUE OR andExp
    (33) logicalExp -> . FALSE OR andExp
    (34) logicalExp -> . andExp
    (20) sumLessExpression -> . variable PLUS_ONE
    (21) sumLessExpression -> . variable MINUS_ONE
    (35) andExp -> . TRUE AND compExp
    (36) andExp -> . FALSE AND compExp
    (37) andExp -> . compExp
    (8) variable -> . DOLLAR IDENTIFIER
    (38) compExp -> . sumExp compSign sumExp
    (39) compExp -> . sumExp
    (46) sumExp -> . term sumSign sumExp
    (47) sumExp -> . term
    (50) term -> . multiNegExp multiSign term
    (51) term -> . multiNegExp
    (54) multiNegExp -> . unaryOp multiNegExp
    (55) multiNegExp -> . factor
    (56) unaryOp -> . MINUS
    (57) unaryOp -> . PLUS
    (58) factor -> . variable
    (59) factor -> . variableType
    (60) factor -> . IDENTIFIER
    (61) factor -> . LEFT_PAR expression RIGHT_PAR
    (11) variableType -> . number
    (14) variableType -> . STRING
    (15) variableType -> . TRUE
    (16) variableType -> . FALSE
    (12) number -> . INTEGER
    (13) number -> . FLOAT

    TRUE            shift and go to state 13
    FALSE           shift and go to state 30
    DOLLAR          shift and go to state 24
    MINUS           shift and go to state 14
    PLUS            shift and go to state 16
    IDENTIFIER      shift and go to state 20
    LEFT_PAR        shift and go to state 36
    STRING          shift and go to state 10
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 32

    andExp                         shift and go to state 29
    variableType                   shift and go to state 7
    sumLessExpression              shift and go to state 21
    unaryOp                        shift and go to state 31
    expression                     shift and go to state 70
    factor                         shift and go to state 18
    compExp                        shift and go to state 33
    number                         shift and go to state 11
    sumExp                         shift and go to state 34
    term                           shift and go to state 25
    multiNegExp                    shift and go to state 9
    variable                       shift and go to state 69
    logicalExp                     shift and go to state 8

state 37

    (26) conditionalStmt -> unmatchedif .

    IF              reduce using rule 26 (conditionalStmt -> unmatchedif .)
    WHILE           reduce using rule 26 (conditionalStmt -> unmatchedif .)
    USE             reduce using rule 26 (conditionalStmt -> unmatchedif .)
    DOLLAR          reduce using rule 26 (conditionalStmt -> unmatchedif .)
    TRUE            reduce using rule 26 (conditionalStmt -> unmatchedif .)
    FALSE           reduce using rule 26 (conditionalStmt -> unmatchedif .)
    PRINT           reduce using rule 26 (conditionalStmt -> unmatchedif .)
    MINUS           reduce using rule 26 (conditionalStmt -> unmatchedif .)
    PLUS            reduce using rule 26 (conditionalStmt -> unmatchedif .)
    STRING          reduce using rule 26 (conditionalStmt -> unmatchedif .)
    IDENTIFIER      reduce using rule 26 (conditionalStmt -> unmatchedif .)
    LEFT_PAR        reduce using rule 26 (conditionalStmt -> unmatchedif .)
    INTEGER         reduce using rule 26 (conditionalStmt -> unmatchedif .)
    FLOAT           reduce using rule 26 (conditionalStmt -> unmatchedif .)
    $end            reduce using rule 26 (conditionalStmt -> unmatchedif .)
    RIGHT_BRACE     reduce using rule 26 (conditionalStmt -> unmatchedif .)


state 38

    (22) statement -> expression .

    IF              reduce using rule 22 (statement -> expression .)
    WHILE           reduce using rule 22 (statement -> expression .)
    USE             reduce using rule 22 (statement -> expression .)
    DOLLAR          reduce using rule 22 (statement -> expression .)
    TRUE            reduce using rule 22 (statement -> expression .)
    FALSE           reduce using rule 22 (statement -> expression .)
    PRINT           reduce using rule 22 (statement -> expression .)
    MINUS           reduce using rule 22 (statement -> expression .)
    PLUS            reduce using rule 22 (statement -> expression .)
    STRING          reduce using rule 22 (statement -> expression .)
    IDENTIFIER      reduce using rule 22 (statement -> expression .)
    LEFT_PAR        reduce using rule 22 (statement -> expression .)
    INTEGER         reduce using rule 22 (statement -> expression .)
    FLOAT           reduce using rule 22 (statement -> expression .)
    $end            reduce using rule 22 (statement -> expression .)
    RIGHT_BRACE     reduce using rule 22 (statement -> expression .)


state 39

    (17) constDeclaration -> USE CONSTANT . IDENTIFIER CONST_ASSIGN variableType

    IDENTIFIER      shift and go to state 71


state 40

    (29) loopStmt -> WHILE LEFT_PAR . logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE
    (32) logicalExp -> . TRUE OR andExp
    (33) logicalExp -> . FALSE OR andExp
    (34) logicalExp -> . andExp
    (35) andExp -> . TRUE AND compExp
    (36) andExp -> . FALSE AND compExp
    (37) andExp -> . compExp
    (38) compExp -> . sumExp compSign sumExp
    (39) compExp -> . sumExp
    (46) sumExp -> . term sumSign sumExp
    (47) sumExp -> . term
    (50) term -> . multiNegExp multiSign term
    (51) term -> . multiNegExp
    (54) multiNegExp -> . unaryOp multiNegExp
    (55) multiNegExp -> . factor
    (56) unaryOp -> . MINUS
    (57) unaryOp -> . PLUS
    (58) factor -> . variable
    (59) factor -> . variableType
    (60) factor -> . IDENTIFIER
    (61) factor -> . LEFT_PAR expression RIGHT_PAR
    (8) variable -> . DOLLAR IDENTIFIER
    (11) variableType -> . number
    (14) variableType -> . STRING
    (15) variableType -> . TRUE
    (16) variableType -> . FALSE
    (12) number -> . INTEGER
    (13) number -> . FLOAT

    TRUE            shift and go to state 13
    FALSE           shift and go to state 30
    MINUS           shift and go to state 14
    PLUS            shift and go to state 16
    IDENTIFIER      shift and go to state 20
    LEFT_PAR        shift and go to state 36
    DOLLAR          shift and go to state 24
    STRING          shift and go to state 10
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 32

    andExp                         shift and go to state 29
    variableType                   shift and go to state 7
    unaryOp                        shift and go to state 31
    compExp                        shift and go to state 33
    number                         shift and go to state 11
    sumExp                         shift and go to state 34
    term                           shift and go to state 25
    multiNegExp                    shift and go to state 9
    variable                       shift and go to state 60
    factor                         shift and go to state 18
    logicalExp                     shift and go to state 72

state 41

    (18) funcDeclaration -> PRINT LEFT_PAR . factor RIGHT_PAR
    (19) funcDeclaration -> PRINT LEFT_PAR . sumLessExpression RIGHT_PAR
    (58) factor -> . variable
    (59) factor -> . variableType
    (60) factor -> . IDENTIFIER
    (61) factor -> . LEFT_PAR expression RIGHT_PAR
    (20) sumLessExpression -> . variable PLUS_ONE
    (21) sumLessExpression -> . variable MINUS_ONE
    (8) variable -> . DOLLAR IDENTIFIER
    (11) variableType -> . number
    (14) variableType -> . STRING
    (15) variableType -> . TRUE
    (16) variableType -> . FALSE
    (12) number -> . INTEGER
    (13) number -> . FLOAT

    IDENTIFIER      shift and go to state 20
    LEFT_PAR        shift and go to state 36
    DOLLAR          shift and go to state 24
    STRING          shift and go to state 10
    TRUE            shift and go to state 58
    FALSE           shift and go to state 61
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 32

    variableType                   shift and go to state 7
    sumLessExpression              shift and go to state 73
    number                         shift and go to state 11
    factor                         shift and go to state 74
    variable                       shift and go to state 75

state 42

    (53) multiSign -> BETWEEN .

    MINUS           reduce using rule 53 (multiSign -> BETWEEN .)
    PLUS            reduce using rule 53 (multiSign -> BETWEEN .)
    STRING          reduce using rule 53 (multiSign -> BETWEEN .)
    TRUE            reduce using rule 53 (multiSign -> BETWEEN .)
    FALSE           reduce using rule 53 (multiSign -> BETWEEN .)
    IDENTIFIER      reduce using rule 53 (multiSign -> BETWEEN .)
    LEFT_PAR        reduce using rule 53 (multiSign -> BETWEEN .)
    DOLLAR          reduce using rule 53 (multiSign -> BETWEEN .)
    INTEGER         reduce using rule 53 (multiSign -> BETWEEN .)
    FLOAT           reduce using rule 53 (multiSign -> BETWEEN .)


state 43

    (52) multiSign -> STAR .

    MINUS           reduce using rule 52 (multiSign -> STAR .)
    PLUS            reduce using rule 52 (multiSign -> STAR .)
    STRING          reduce using rule 52 (multiSign -> STAR .)
    TRUE            reduce using rule 52 (multiSign -> STAR .)
    FALSE           reduce using rule 52 (multiSign -> STAR .)
    IDENTIFIER      reduce using rule 52 (multiSign -> STAR .)
    LEFT_PAR        reduce using rule 52 (multiSign -> STAR .)
    DOLLAR          reduce using rule 52 (multiSign -> STAR .)
    INTEGER         reduce using rule 52 (multiSign -> STAR .)
    FLOAT           reduce using rule 52 (multiSign -> STAR .)


state 44

    (50) term -> multiNegExp multiSign . term
    (50) term -> . multiNegExp multiSign term
    (51) term -> . multiNegExp
    (54) multiNegExp -> . unaryOp multiNegExp
    (55) multiNegExp -> . factor
    (56) unaryOp -> . MINUS
    (57) unaryOp -> . PLUS
    (58) factor -> . variable
    (59) factor -> . variableType
    (60) factor -> . IDENTIFIER
    (61) factor -> . LEFT_PAR expression RIGHT_PAR
    (8) variable -> . DOLLAR IDENTIFIER
    (11) variableType -> . number
    (14) variableType -> . STRING
    (15) variableType -> . TRUE
    (16) variableType -> . FALSE
    (12) number -> . INTEGER
    (13) number -> . FLOAT

    MINUS           shift and go to state 14
    PLUS            shift and go to state 16
    IDENTIFIER      shift and go to state 20
    LEFT_PAR        shift and go to state 36
    DOLLAR          shift and go to state 24
    STRING          shift and go to state 10
    TRUE            shift and go to state 58
    FALSE           shift and go to state 61
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 32

    term                           shift and go to state 76
    variableType                   shift and go to state 7
    unaryOp                        shift and go to state 31
    multiNegExp                    shift and go to state 9
    number                         shift and go to state 11
    factor                         shift and go to state 18
    variable                       shift and go to state 60

state 45

    (35) andExp -> TRUE AND . compExp
    (38) compExp -> . sumExp compSign sumExp
    (39) compExp -> . sumExp
    (46) sumExp -> . term sumSign sumExp
    (47) sumExp -> . term
    (50) term -> . multiNegExp multiSign term
    (51) term -> . multiNegExp
    (54) multiNegExp -> . unaryOp multiNegExp
    (55) multiNegExp -> . factor
    (56) unaryOp -> . MINUS
    (57) unaryOp -> . PLUS
    (58) factor -> . variable
    (59) factor -> . variableType
    (60) factor -> . IDENTIFIER
    (61) factor -> . LEFT_PAR expression RIGHT_PAR
    (8) variable -> . DOLLAR IDENTIFIER
    (11) variableType -> . number
    (14) variableType -> . STRING
    (15) variableType -> . TRUE
    (16) variableType -> . FALSE
    (12) number -> . INTEGER
    (13) number -> . FLOAT

    MINUS           shift and go to state 14
    PLUS            shift and go to state 16
    IDENTIFIER      shift and go to state 20
    LEFT_PAR        shift and go to state 36
    DOLLAR          shift and go to state 24
    STRING          shift and go to state 10
    TRUE            shift and go to state 58
    FALSE           shift and go to state 61
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 32

    term                           shift and go to state 25
    variableType                   shift and go to state 7
    unaryOp                        shift and go to state 31
    factor                         shift and go to state 18
    compExp                        shift and go to state 77
    number                         shift and go to state 11
    sumExp                         shift and go to state 34
    multiNegExp                    shift and go to state 9
    variable                       shift and go to state 60

state 46

    (32) logicalExp -> TRUE OR . andExp
    (35) andExp -> . TRUE AND compExp
    (36) andExp -> . FALSE AND compExp
    (37) andExp -> . compExp
    (38) compExp -> . sumExp compSign sumExp
    (39) compExp -> . sumExp
    (46) sumExp -> . term sumSign sumExp
    (47) sumExp -> . term
    (50) term -> . multiNegExp multiSign term
    (51) term -> . multiNegExp
    (54) multiNegExp -> . unaryOp multiNegExp
    (55) multiNegExp -> . factor
    (56) unaryOp -> . MINUS
    (57) unaryOp -> . PLUS
    (58) factor -> . variable
    (59) factor -> . variableType
    (60) factor -> . IDENTIFIER
    (61) factor -> . LEFT_PAR expression RIGHT_PAR
    (8) variable -> . DOLLAR IDENTIFIER
    (11) variableType -> . number
    (14) variableType -> . STRING
    (15) variableType -> . TRUE
    (16) variableType -> . FALSE
    (12) number -> . INTEGER
    (13) number -> . FLOAT

    TRUE            shift and go to state 78
    FALSE           shift and go to state 80
    MINUS           shift and go to state 14
    PLUS            shift and go to state 16
    IDENTIFIER      shift and go to state 20
    LEFT_PAR        shift and go to state 36
    DOLLAR          shift and go to state 24
    STRING          shift and go to state 10
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 32

    andExp                         shift and go to state 79
    variableType                   shift and go to state 7
    unaryOp                        shift and go to state 31
    factor                         shift and go to state 18
    term                           shift and go to state 25
    compExp                        shift and go to state 33
    sumExp                         shift and go to state 34
    multiNegExp                    shift and go to state 9
    variable                       shift and go to state 60
    number                         shift and go to state 11

state 47

    (8) variable -> DOLLAR IDENTIFIER .

    ASSIGN          reduce using rule 8 (variable -> DOLLAR IDENTIFIER .)
    PLUS_ONE        reduce using rule 8 (variable -> DOLLAR IDENTIFIER .)
    MINUS_ONE       reduce using rule 8 (variable -> DOLLAR IDENTIFIER .)
    RIGHT_PAR       reduce using rule 8 (variable -> DOLLAR IDENTIFIER .)
    STAR            reduce using rule 8 (variable -> DOLLAR IDENTIFIER .)
    BETWEEN         reduce using rule 8 (variable -> DOLLAR IDENTIFIER .)
    MINUS           reduce using rule 8 (variable -> DOLLAR IDENTIFIER .)
    PLUS            reduce using rule 8 (variable -> DOLLAR IDENTIFIER .)
    IF              reduce using rule 8 (variable -> DOLLAR IDENTIFIER .)
    WHILE           reduce using rule 8 (variable -> DOLLAR IDENTIFIER .)
    USE             reduce using rule 8 (variable -> DOLLAR IDENTIFIER .)
    DOLLAR          reduce using rule 8 (variable -> DOLLAR IDENTIFIER .)
    TRUE            reduce using rule 8 (variable -> DOLLAR IDENTIFIER .)
    FALSE           reduce using rule 8 (variable -> DOLLAR IDENTIFIER .)
    PRINT           reduce using rule 8 (variable -> DOLLAR IDENTIFIER .)
    STRING          reduce using rule 8 (variable -> DOLLAR IDENTIFIER .)
    IDENTIFIER      reduce using rule 8 (variable -> DOLLAR IDENTIFIER .)
    LEFT_PAR        reduce using rule 8 (variable -> DOLLAR IDENTIFIER .)
    INTEGER         reduce using rule 8 (variable -> DOLLAR IDENTIFIER .)
    FLOAT           reduce using rule 8 (variable -> DOLLAR IDENTIFIER .)
    $end            reduce using rule 8 (variable -> DOLLAR IDENTIFIER .)
    LESS_OR_EQUAL   reduce using rule 8 (variable -> DOLLAR IDENTIFIER .)
    LESS_THAN       reduce using rule 8 (variable -> DOLLAR IDENTIFIER .)
    MORE_THAN       reduce using rule 8 (variable -> DOLLAR IDENTIFIER .)
    GREATER_OR_EQUAL reduce using rule 8 (variable -> DOLLAR IDENTIFIER .)
    EQ              reduce using rule 8 (variable -> DOLLAR IDENTIFIER .)
    NEQ             reduce using rule 8 (variable -> DOLLAR IDENTIFIER .)
    RIGHT_BRACE     reduce using rule 8 (variable -> DOLLAR IDENTIFIER .)


state 48

    (49) sumSign -> PLUS .

    MINUS           reduce using rule 49 (sumSign -> PLUS .)
    PLUS            reduce using rule 49 (sumSign -> PLUS .)
    STRING          reduce using rule 49 (sumSign -> PLUS .)
    TRUE            reduce using rule 49 (sumSign -> PLUS .)
    FALSE           reduce using rule 49 (sumSign -> PLUS .)
    IDENTIFIER      reduce using rule 49 (sumSign -> PLUS .)
    LEFT_PAR        reduce using rule 49 (sumSign -> PLUS .)
    DOLLAR          reduce using rule 49 (sumSign -> PLUS .)
    INTEGER         reduce using rule 49 (sumSign -> PLUS .)
    FLOAT           reduce using rule 49 (sumSign -> PLUS .)


state 49

    (46) sumExp -> term sumSign . sumExp
    (46) sumExp -> . term sumSign sumExp
    (47) sumExp -> . term
    (50) term -> . multiNegExp multiSign term
    (51) term -> . multiNegExp
    (54) multiNegExp -> . unaryOp multiNegExp
    (55) multiNegExp -> . factor
    (56) unaryOp -> . MINUS
    (57) unaryOp -> . PLUS
    (58) factor -> . variable
    (59) factor -> . variableType
    (60) factor -> . IDENTIFIER
    (61) factor -> . LEFT_PAR expression RIGHT_PAR
    (8) variable -> . DOLLAR IDENTIFIER
    (11) variableType -> . number
    (14) variableType -> . STRING
    (15) variableType -> . TRUE
    (16) variableType -> . FALSE
    (12) number -> . INTEGER
    (13) number -> . FLOAT

    MINUS           shift and go to state 14
    PLUS            shift and go to state 16
    IDENTIFIER      shift and go to state 20
    LEFT_PAR        shift and go to state 36
    DOLLAR          shift and go to state 24
    STRING          shift and go to state 10
    TRUE            shift and go to state 58
    FALSE           shift and go to state 61
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 32

    term                           shift and go to state 25
    variableType                   shift and go to state 7
    unaryOp                        shift and go to state 31
    factor                         shift and go to state 18
    number                         shift and go to state 11
    sumExp                         shift and go to state 81
    multiNegExp                    shift and go to state 9
    variable                       shift and go to state 60

state 50

    (48) sumSign -> MINUS .

    MINUS           reduce using rule 48 (sumSign -> MINUS .)
    PLUS            reduce using rule 48 (sumSign -> MINUS .)
    STRING          reduce using rule 48 (sumSign -> MINUS .)
    TRUE            reduce using rule 48 (sumSign -> MINUS .)
    FALSE           reduce using rule 48 (sumSign -> MINUS .)
    IDENTIFIER      reduce using rule 48 (sumSign -> MINUS .)
    LEFT_PAR        reduce using rule 48 (sumSign -> MINUS .)
    DOLLAR          reduce using rule 48 (sumSign -> MINUS .)
    INTEGER         reduce using rule 48 (sumSign -> MINUS .)
    FLOAT           reduce using rule 48 (sumSign -> MINUS .)


state 51

    (2) declarationList -> declaration declarationList .

    $end            reduce using rule 2 (declarationList -> declaration declarationList .)
    RIGHT_BRACE     reduce using rule 2 (declarationList -> declaration declarationList .)


state 52

    (20) sumLessExpression -> variable PLUS_ONE .

    RIGHT_PAR       reduce using rule 20 (sumLessExpression -> variable PLUS_ONE .)
    IF              reduce using rule 20 (sumLessExpression -> variable PLUS_ONE .)
    WHILE           reduce using rule 20 (sumLessExpression -> variable PLUS_ONE .)
    USE             reduce using rule 20 (sumLessExpression -> variable PLUS_ONE .)
    DOLLAR          reduce using rule 20 (sumLessExpression -> variable PLUS_ONE .)
    TRUE            reduce using rule 20 (sumLessExpression -> variable PLUS_ONE .)
    FALSE           reduce using rule 20 (sumLessExpression -> variable PLUS_ONE .)
    PRINT           reduce using rule 20 (sumLessExpression -> variable PLUS_ONE .)
    MINUS           reduce using rule 20 (sumLessExpression -> variable PLUS_ONE .)
    PLUS            reduce using rule 20 (sumLessExpression -> variable PLUS_ONE .)
    STRING          reduce using rule 20 (sumLessExpression -> variable PLUS_ONE .)
    IDENTIFIER      reduce using rule 20 (sumLessExpression -> variable PLUS_ONE .)
    LEFT_PAR        reduce using rule 20 (sumLessExpression -> variable PLUS_ONE .)
    INTEGER         reduce using rule 20 (sumLessExpression -> variable PLUS_ONE .)
    FLOAT           reduce using rule 20 (sumLessExpression -> variable PLUS_ONE .)
    $end            reduce using rule 20 (sumLessExpression -> variable PLUS_ONE .)
    RIGHT_BRACE     reduce using rule 20 (sumLessExpression -> variable PLUS_ONE .)


state 53

    (21) sumLessExpression -> variable MINUS_ONE .

    RIGHT_PAR       reduce using rule 21 (sumLessExpression -> variable MINUS_ONE .)
    IF              reduce using rule 21 (sumLessExpression -> variable MINUS_ONE .)
    WHILE           reduce using rule 21 (sumLessExpression -> variable MINUS_ONE .)
    USE             reduce using rule 21 (sumLessExpression -> variable MINUS_ONE .)
    DOLLAR          reduce using rule 21 (sumLessExpression -> variable MINUS_ONE .)
    TRUE            reduce using rule 21 (sumLessExpression -> variable MINUS_ONE .)
    FALSE           reduce using rule 21 (sumLessExpression -> variable MINUS_ONE .)
    PRINT           reduce using rule 21 (sumLessExpression -> variable MINUS_ONE .)
    MINUS           reduce using rule 21 (sumLessExpression -> variable MINUS_ONE .)
    PLUS            reduce using rule 21 (sumLessExpression -> variable MINUS_ONE .)
    STRING          reduce using rule 21 (sumLessExpression -> variable MINUS_ONE .)
    IDENTIFIER      reduce using rule 21 (sumLessExpression -> variable MINUS_ONE .)
    LEFT_PAR        reduce using rule 21 (sumLessExpression -> variable MINUS_ONE .)
    INTEGER         reduce using rule 21 (sumLessExpression -> variable MINUS_ONE .)
    FLOAT           reduce using rule 21 (sumLessExpression -> variable MINUS_ONE .)
    $end            reduce using rule 21 (sumLessExpression -> variable MINUS_ONE .)
    RIGHT_BRACE     reduce using rule 21 (sumLessExpression -> variable MINUS_ONE .)


state 54

    (9) varDeclaration -> variable ASSIGN . sumExp
    (10) varDeclaration -> variable ASSIGN . STDIN
    (46) sumExp -> . term sumSign sumExp
    (47) sumExp -> . term
    (50) term -> . multiNegExp multiSign term
    (51) term -> . multiNegExp
    (54) multiNegExp -> . unaryOp multiNegExp
    (55) multiNegExp -> . factor
    (56) unaryOp -> . MINUS
    (57) unaryOp -> . PLUS
    (58) factor -> . variable
    (59) factor -> . variableType
    (60) factor -> . IDENTIFIER
    (61) factor -> . LEFT_PAR expression RIGHT_PAR
    (8) variable -> . DOLLAR IDENTIFIER
    (11) variableType -> . number
    (14) variableType -> . STRING
    (15) variableType -> . TRUE
    (16) variableType -> . FALSE
    (12) number -> . INTEGER
    (13) number -> . FLOAT

    STDIN           shift and go to state 82
    MINUS           shift and go to state 14
    PLUS            shift and go to state 16
    IDENTIFIER      shift and go to state 20
    LEFT_PAR        shift and go to state 36
    DOLLAR          shift and go to state 24
    STRING          shift and go to state 10
    TRUE            shift and go to state 58
    FALSE           shift and go to state 61
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 32

    term                           shift and go to state 25
    variableType                   shift and go to state 7
    unaryOp                        shift and go to state 31
    factor                         shift and go to state 18
    number                         shift and go to state 11
    sumExp                         shift and go to state 83
    multiNegExp                    shift and go to state 9
    variable                       shift and go to state 60

state 55

    (27) matchedif -> IF LEFT_PAR . logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE ELSE LEFT_BRACE declarationList RIGHT_BRACE
    (28) unmatchedif -> IF LEFT_PAR . logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE
    (32) logicalExp -> . TRUE OR andExp
    (33) logicalExp -> . FALSE OR andExp
    (34) logicalExp -> . andExp
    (35) andExp -> . TRUE AND compExp
    (36) andExp -> . FALSE AND compExp
    (37) andExp -> . compExp
    (38) compExp -> . sumExp compSign sumExp
    (39) compExp -> . sumExp
    (46) sumExp -> . term sumSign sumExp
    (47) sumExp -> . term
    (50) term -> . multiNegExp multiSign term
    (51) term -> . multiNegExp
    (54) multiNegExp -> . unaryOp multiNegExp
    (55) multiNegExp -> . factor
    (56) unaryOp -> . MINUS
    (57) unaryOp -> . PLUS
    (58) factor -> . variable
    (59) factor -> . variableType
    (60) factor -> . IDENTIFIER
    (61) factor -> . LEFT_PAR expression RIGHT_PAR
    (8) variable -> . DOLLAR IDENTIFIER
    (11) variableType -> . number
    (14) variableType -> . STRING
    (15) variableType -> . TRUE
    (16) variableType -> . FALSE
    (12) number -> . INTEGER
    (13) number -> . FLOAT

    TRUE            shift and go to state 13
    FALSE           shift and go to state 30
    MINUS           shift and go to state 14
    PLUS            shift and go to state 16
    IDENTIFIER      shift and go to state 20
    LEFT_PAR        shift and go to state 36
    DOLLAR          shift and go to state 24
    STRING          shift and go to state 10
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 32

    andExp                         shift and go to state 29
    variableType                   shift and go to state 7
    unaryOp                        shift and go to state 31
    compExp                        shift and go to state 33
    number                         shift and go to state 11
    sumExp                         shift and go to state 34
    term                           shift and go to state 25
    multiNegExp                    shift and go to state 9
    variable                       shift and go to state 60
    factor                         shift and go to state 18
    logicalExp                     shift and go to state 84

state 56

    (36) andExp -> FALSE AND . compExp
    (38) compExp -> . sumExp compSign sumExp
    (39) compExp -> . sumExp
    (46) sumExp -> . term sumSign sumExp
    (47) sumExp -> . term
    (50) term -> . multiNegExp multiSign term
    (51) term -> . multiNegExp
    (54) multiNegExp -> . unaryOp multiNegExp
    (55) multiNegExp -> . factor
    (56) unaryOp -> . MINUS
    (57) unaryOp -> . PLUS
    (58) factor -> . variable
    (59) factor -> . variableType
    (60) factor -> . IDENTIFIER
    (61) factor -> . LEFT_PAR expression RIGHT_PAR
    (8) variable -> . DOLLAR IDENTIFIER
    (11) variableType -> . number
    (14) variableType -> . STRING
    (15) variableType -> . TRUE
    (16) variableType -> . FALSE
    (12) number -> . INTEGER
    (13) number -> . FLOAT

    MINUS           shift and go to state 14
    PLUS            shift and go to state 16
    IDENTIFIER      shift and go to state 20
    LEFT_PAR        shift and go to state 36
    DOLLAR          shift and go to state 24
    STRING          shift and go to state 10
    TRUE            shift and go to state 58
    FALSE           shift and go to state 61
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 32

    term                           shift and go to state 25
    variableType                   shift and go to state 7
    unaryOp                        shift and go to state 31
    factor                         shift and go to state 18
    compExp                        shift and go to state 85
    number                         shift and go to state 11
    sumExp                         shift and go to state 34
    multiNegExp                    shift and go to state 9
    variable                       shift and go to state 60

state 57

    (33) logicalExp -> FALSE OR . andExp
    (35) andExp -> . TRUE AND compExp
    (36) andExp -> . FALSE AND compExp
    (37) andExp -> . compExp
    (38) compExp -> . sumExp compSign sumExp
    (39) compExp -> . sumExp
    (46) sumExp -> . term sumSign sumExp
    (47) sumExp -> . term
    (50) term -> . multiNegExp multiSign term
    (51) term -> . multiNegExp
    (54) multiNegExp -> . unaryOp multiNegExp
    (55) multiNegExp -> . factor
    (56) unaryOp -> . MINUS
    (57) unaryOp -> . PLUS
    (58) factor -> . variable
    (59) factor -> . variableType
    (60) factor -> . IDENTIFIER
    (61) factor -> . LEFT_PAR expression RIGHT_PAR
    (8) variable -> . DOLLAR IDENTIFIER
    (11) variableType -> . number
    (14) variableType -> . STRING
    (15) variableType -> . TRUE
    (16) variableType -> . FALSE
    (12) number -> . INTEGER
    (13) number -> . FLOAT

    TRUE            shift and go to state 78
    FALSE           shift and go to state 80
    MINUS           shift and go to state 14
    PLUS            shift and go to state 16
    IDENTIFIER      shift and go to state 20
    LEFT_PAR        shift and go to state 36
    DOLLAR          shift and go to state 24
    STRING          shift and go to state 10
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 32

    andExp                         shift and go to state 86
    variableType                   shift and go to state 7
    unaryOp                        shift and go to state 31
    factor                         shift and go to state 18
    term                           shift and go to state 25
    compExp                        shift and go to state 33
    sumExp                         shift and go to state 34
    multiNegExp                    shift and go to state 9
    variable                       shift and go to state 60
    number                         shift and go to state 11

state 58

    (15) variableType -> TRUE .

    IF              reduce using rule 15 (variableType -> TRUE .)
    WHILE           reduce using rule 15 (variableType -> TRUE .)
    USE             reduce using rule 15 (variableType -> TRUE .)
    DOLLAR          reduce using rule 15 (variableType -> TRUE .)
    TRUE            reduce using rule 15 (variableType -> TRUE .)
    FALSE           reduce using rule 15 (variableType -> TRUE .)
    PRINT           reduce using rule 15 (variableType -> TRUE .)
    MINUS           reduce using rule 15 (variableType -> TRUE .)
    PLUS            reduce using rule 15 (variableType -> TRUE .)
    STRING          reduce using rule 15 (variableType -> TRUE .)
    IDENTIFIER      reduce using rule 15 (variableType -> TRUE .)
    LEFT_PAR        reduce using rule 15 (variableType -> TRUE .)
    INTEGER         reduce using rule 15 (variableType -> TRUE .)
    FLOAT           reduce using rule 15 (variableType -> TRUE .)
    $end            reduce using rule 15 (variableType -> TRUE .)
    RIGHT_PAR       reduce using rule 15 (variableType -> TRUE .)
    STAR            reduce using rule 15 (variableType -> TRUE .)
    BETWEEN         reduce using rule 15 (variableType -> TRUE .)
    LESS_OR_EQUAL   reduce using rule 15 (variableType -> TRUE .)
    LESS_THAN       reduce using rule 15 (variableType -> TRUE .)
    MORE_THAN       reduce using rule 15 (variableType -> TRUE .)
    GREATER_OR_EQUAL reduce using rule 15 (variableType -> TRUE .)
    EQ              reduce using rule 15 (variableType -> TRUE .)
    NEQ             reduce using rule 15 (variableType -> TRUE .)
    RIGHT_BRACE     reduce using rule 15 (variableType -> TRUE .)


state 59

    (54) multiNegExp -> unaryOp multiNegExp .

    STAR            reduce using rule 54 (multiNegExp -> unaryOp multiNegExp .)
    BETWEEN         reduce using rule 54 (multiNegExp -> unaryOp multiNegExp .)
    MINUS           reduce using rule 54 (multiNegExp -> unaryOp multiNegExp .)
    PLUS            reduce using rule 54 (multiNegExp -> unaryOp multiNegExp .)
    IF              reduce using rule 54 (multiNegExp -> unaryOp multiNegExp .)
    WHILE           reduce using rule 54 (multiNegExp -> unaryOp multiNegExp .)
    USE             reduce using rule 54 (multiNegExp -> unaryOp multiNegExp .)
    DOLLAR          reduce using rule 54 (multiNegExp -> unaryOp multiNegExp .)
    TRUE            reduce using rule 54 (multiNegExp -> unaryOp multiNegExp .)
    FALSE           reduce using rule 54 (multiNegExp -> unaryOp multiNegExp .)
    PRINT           reduce using rule 54 (multiNegExp -> unaryOp multiNegExp .)
    STRING          reduce using rule 54 (multiNegExp -> unaryOp multiNegExp .)
    IDENTIFIER      reduce using rule 54 (multiNegExp -> unaryOp multiNegExp .)
    LEFT_PAR        reduce using rule 54 (multiNegExp -> unaryOp multiNegExp .)
    INTEGER         reduce using rule 54 (multiNegExp -> unaryOp multiNegExp .)
    FLOAT           reduce using rule 54 (multiNegExp -> unaryOp multiNegExp .)
    $end            reduce using rule 54 (multiNegExp -> unaryOp multiNegExp .)
    LESS_OR_EQUAL   reduce using rule 54 (multiNegExp -> unaryOp multiNegExp .)
    LESS_THAN       reduce using rule 54 (multiNegExp -> unaryOp multiNegExp .)
    MORE_THAN       reduce using rule 54 (multiNegExp -> unaryOp multiNegExp .)
    GREATER_OR_EQUAL reduce using rule 54 (multiNegExp -> unaryOp multiNegExp .)
    EQ              reduce using rule 54 (multiNegExp -> unaryOp multiNegExp .)
    NEQ             reduce using rule 54 (multiNegExp -> unaryOp multiNegExp .)
    RIGHT_PAR       reduce using rule 54 (multiNegExp -> unaryOp multiNegExp .)
    RIGHT_BRACE     reduce using rule 54 (multiNegExp -> unaryOp multiNegExp .)


state 60

    (58) factor -> variable .

    RIGHT_PAR       reduce using rule 58 (factor -> variable .)
    STAR            reduce using rule 58 (factor -> variable .)
    BETWEEN         reduce using rule 58 (factor -> variable .)
    MINUS           reduce using rule 58 (factor -> variable .)
    PLUS            reduce using rule 58 (factor -> variable .)
    IF              reduce using rule 58 (factor -> variable .)
    WHILE           reduce using rule 58 (factor -> variable .)
    USE             reduce using rule 58 (factor -> variable .)
    DOLLAR          reduce using rule 58 (factor -> variable .)
    TRUE            reduce using rule 58 (factor -> variable .)
    FALSE           reduce using rule 58 (factor -> variable .)
    PRINT           reduce using rule 58 (factor -> variable .)
    STRING          reduce using rule 58 (factor -> variable .)
    IDENTIFIER      reduce using rule 58 (factor -> variable .)
    LEFT_PAR        reduce using rule 58 (factor -> variable .)
    INTEGER         reduce using rule 58 (factor -> variable .)
    FLOAT           reduce using rule 58 (factor -> variable .)
    $end            reduce using rule 58 (factor -> variable .)
    LESS_OR_EQUAL   reduce using rule 58 (factor -> variable .)
    LESS_THAN       reduce using rule 58 (factor -> variable .)
    MORE_THAN       reduce using rule 58 (factor -> variable .)
    GREATER_OR_EQUAL reduce using rule 58 (factor -> variable .)
    EQ              reduce using rule 58 (factor -> variable .)
    NEQ             reduce using rule 58 (factor -> variable .)
    RIGHT_BRACE     reduce using rule 58 (factor -> variable .)


state 61

    (16) variableType -> FALSE .

    IF              reduce using rule 16 (variableType -> FALSE .)
    WHILE           reduce using rule 16 (variableType -> FALSE .)
    USE             reduce using rule 16 (variableType -> FALSE .)
    DOLLAR          reduce using rule 16 (variableType -> FALSE .)
    TRUE            reduce using rule 16 (variableType -> FALSE .)
    FALSE           reduce using rule 16 (variableType -> FALSE .)
    PRINT           reduce using rule 16 (variableType -> FALSE .)
    MINUS           reduce using rule 16 (variableType -> FALSE .)
    PLUS            reduce using rule 16 (variableType -> FALSE .)
    STRING          reduce using rule 16 (variableType -> FALSE .)
    IDENTIFIER      reduce using rule 16 (variableType -> FALSE .)
    LEFT_PAR        reduce using rule 16 (variableType -> FALSE .)
    INTEGER         reduce using rule 16 (variableType -> FALSE .)
    FLOAT           reduce using rule 16 (variableType -> FALSE .)
    $end            reduce using rule 16 (variableType -> FALSE .)
    RIGHT_PAR       reduce using rule 16 (variableType -> FALSE .)
    STAR            reduce using rule 16 (variableType -> FALSE .)
    BETWEEN         reduce using rule 16 (variableType -> FALSE .)
    LESS_OR_EQUAL   reduce using rule 16 (variableType -> FALSE .)
    LESS_THAN       reduce using rule 16 (variableType -> FALSE .)
    MORE_THAN       reduce using rule 16 (variableType -> FALSE .)
    GREATER_OR_EQUAL reduce using rule 16 (variableType -> FALSE .)
    EQ              reduce using rule 16 (variableType -> FALSE .)
    NEQ             reduce using rule 16 (variableType -> FALSE .)
    RIGHT_BRACE     reduce using rule 16 (variableType -> FALSE .)


state 62

    (42) compSign -> MORE_THAN .

    MINUS           reduce using rule 42 (compSign -> MORE_THAN .)
    PLUS            reduce using rule 42 (compSign -> MORE_THAN .)
    STRING          reduce using rule 42 (compSign -> MORE_THAN .)
    TRUE            reduce using rule 42 (compSign -> MORE_THAN .)
    FALSE           reduce using rule 42 (compSign -> MORE_THAN .)
    IDENTIFIER      reduce using rule 42 (compSign -> MORE_THAN .)
    LEFT_PAR        reduce using rule 42 (compSign -> MORE_THAN .)
    DOLLAR          reduce using rule 42 (compSign -> MORE_THAN .)
    INTEGER         reduce using rule 42 (compSign -> MORE_THAN .)
    FLOAT           reduce using rule 42 (compSign -> MORE_THAN .)


state 63

    (40) compSign -> LESS_OR_EQUAL .

    MINUS           reduce using rule 40 (compSign -> LESS_OR_EQUAL .)
    PLUS            reduce using rule 40 (compSign -> LESS_OR_EQUAL .)
    STRING          reduce using rule 40 (compSign -> LESS_OR_EQUAL .)
    TRUE            reduce using rule 40 (compSign -> LESS_OR_EQUAL .)
    FALSE           reduce using rule 40 (compSign -> LESS_OR_EQUAL .)
    IDENTIFIER      reduce using rule 40 (compSign -> LESS_OR_EQUAL .)
    LEFT_PAR        reduce using rule 40 (compSign -> LESS_OR_EQUAL .)
    DOLLAR          reduce using rule 40 (compSign -> LESS_OR_EQUAL .)
    INTEGER         reduce using rule 40 (compSign -> LESS_OR_EQUAL .)
    FLOAT           reduce using rule 40 (compSign -> LESS_OR_EQUAL .)


state 64

    (43) compSign -> GREATER_OR_EQUAL .

    MINUS           reduce using rule 43 (compSign -> GREATER_OR_EQUAL .)
    PLUS            reduce using rule 43 (compSign -> GREATER_OR_EQUAL .)
    STRING          reduce using rule 43 (compSign -> GREATER_OR_EQUAL .)
    TRUE            reduce using rule 43 (compSign -> GREATER_OR_EQUAL .)
    FALSE           reduce using rule 43 (compSign -> GREATER_OR_EQUAL .)
    IDENTIFIER      reduce using rule 43 (compSign -> GREATER_OR_EQUAL .)
    LEFT_PAR        reduce using rule 43 (compSign -> GREATER_OR_EQUAL .)
    DOLLAR          reduce using rule 43 (compSign -> GREATER_OR_EQUAL .)
    INTEGER         reduce using rule 43 (compSign -> GREATER_OR_EQUAL .)
    FLOAT           reduce using rule 43 (compSign -> GREATER_OR_EQUAL .)


state 65

    (38) compExp -> sumExp compSign . sumExp
    (46) sumExp -> . term sumSign sumExp
    (47) sumExp -> . term
    (50) term -> . multiNegExp multiSign term
    (51) term -> . multiNegExp
    (54) multiNegExp -> . unaryOp multiNegExp
    (55) multiNegExp -> . factor
    (56) unaryOp -> . MINUS
    (57) unaryOp -> . PLUS
    (58) factor -> . variable
    (59) factor -> . variableType
    (60) factor -> . IDENTIFIER
    (61) factor -> . LEFT_PAR expression RIGHT_PAR
    (8) variable -> . DOLLAR IDENTIFIER
    (11) variableType -> . number
    (14) variableType -> . STRING
    (15) variableType -> . TRUE
    (16) variableType -> . FALSE
    (12) number -> . INTEGER
    (13) number -> . FLOAT

    MINUS           shift and go to state 14
    PLUS            shift and go to state 16
    IDENTIFIER      shift and go to state 20
    LEFT_PAR        shift and go to state 36
    DOLLAR          shift and go to state 24
    STRING          shift and go to state 10
    TRUE            shift and go to state 58
    FALSE           shift and go to state 61
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 32

    term                           shift and go to state 25
    variableType                   shift and go to state 7
    unaryOp                        shift and go to state 31
    factor                         shift and go to state 18
    number                         shift and go to state 11
    sumExp                         shift and go to state 87
    multiNegExp                    shift and go to state 9
    variable                       shift and go to state 60

state 66

    (41) compSign -> LESS_THAN .

    MINUS           reduce using rule 41 (compSign -> LESS_THAN .)
    PLUS            reduce using rule 41 (compSign -> LESS_THAN .)
    STRING          reduce using rule 41 (compSign -> LESS_THAN .)
    TRUE            reduce using rule 41 (compSign -> LESS_THAN .)
    FALSE           reduce using rule 41 (compSign -> LESS_THAN .)
    IDENTIFIER      reduce using rule 41 (compSign -> LESS_THAN .)
    LEFT_PAR        reduce using rule 41 (compSign -> LESS_THAN .)
    DOLLAR          reduce using rule 41 (compSign -> LESS_THAN .)
    INTEGER         reduce using rule 41 (compSign -> LESS_THAN .)
    FLOAT           reduce using rule 41 (compSign -> LESS_THAN .)


state 67

    (44) compSign -> EQ .

    MINUS           reduce using rule 44 (compSign -> EQ .)
    PLUS            reduce using rule 44 (compSign -> EQ .)
    STRING          reduce using rule 44 (compSign -> EQ .)
    TRUE            reduce using rule 44 (compSign -> EQ .)
    FALSE           reduce using rule 44 (compSign -> EQ .)
    IDENTIFIER      reduce using rule 44 (compSign -> EQ .)
    LEFT_PAR        reduce using rule 44 (compSign -> EQ .)
    DOLLAR          reduce using rule 44 (compSign -> EQ .)
    INTEGER         reduce using rule 44 (compSign -> EQ .)
    FLOAT           reduce using rule 44 (compSign -> EQ .)


state 68

    (45) compSign -> NEQ .

    MINUS           reduce using rule 45 (compSign -> NEQ .)
    PLUS            reduce using rule 45 (compSign -> NEQ .)
    STRING          reduce using rule 45 (compSign -> NEQ .)
    TRUE            reduce using rule 45 (compSign -> NEQ .)
    FALSE           reduce using rule 45 (compSign -> NEQ .)
    IDENTIFIER      reduce using rule 45 (compSign -> NEQ .)
    LEFT_PAR        reduce using rule 45 (compSign -> NEQ .)
    DOLLAR          reduce using rule 45 (compSign -> NEQ .)
    INTEGER         reduce using rule 45 (compSign -> NEQ .)
    FLOAT           reduce using rule 45 (compSign -> NEQ .)


state 69

    (20) sumLessExpression -> variable . PLUS_ONE
    (21) sumLessExpression -> variable . MINUS_ONE
    (58) factor -> variable .

    PLUS_ONE        shift and go to state 52
    MINUS_ONE       shift and go to state 53
    RIGHT_PAR       reduce using rule 58 (factor -> variable .)
    STAR            reduce using rule 58 (factor -> variable .)
    BETWEEN         reduce using rule 58 (factor -> variable .)
    MINUS           reduce using rule 58 (factor -> variable .)
    PLUS            reduce using rule 58 (factor -> variable .)
    IF              reduce using rule 58 (factor -> variable .)
    WHILE           reduce using rule 58 (factor -> variable .)
    USE             reduce using rule 58 (factor -> variable .)
    DOLLAR          reduce using rule 58 (factor -> variable .)
    TRUE            reduce using rule 58 (factor -> variable .)
    FALSE           reduce using rule 58 (factor -> variable .)
    PRINT           reduce using rule 58 (factor -> variable .)
    STRING          reduce using rule 58 (factor -> variable .)
    IDENTIFIER      reduce using rule 58 (factor -> variable .)
    LEFT_PAR        reduce using rule 58 (factor -> variable .)
    INTEGER         reduce using rule 58 (factor -> variable .)
    FLOAT           reduce using rule 58 (factor -> variable .)
    $end            reduce using rule 58 (factor -> variable .)
    LESS_OR_EQUAL   reduce using rule 58 (factor -> variable .)
    LESS_THAN       reduce using rule 58 (factor -> variable .)
    MORE_THAN       reduce using rule 58 (factor -> variable .)
    GREATER_OR_EQUAL reduce using rule 58 (factor -> variable .)
    EQ              reduce using rule 58 (factor -> variable .)
    NEQ             reduce using rule 58 (factor -> variable .)
    RIGHT_BRACE     reduce using rule 58 (factor -> variable .)


state 70

    (61) factor -> LEFT_PAR expression . RIGHT_PAR

    RIGHT_PAR       shift and go to state 88


state 71

    (17) constDeclaration -> USE CONSTANT IDENTIFIER . CONST_ASSIGN variableType

    CONST_ASSIGN    shift and go to state 89


state 72

    (29) loopStmt -> WHILE LEFT_PAR logicalExp . RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE

    RIGHT_PAR       shift and go to state 90


state 73

    (19) funcDeclaration -> PRINT LEFT_PAR sumLessExpression . RIGHT_PAR

    RIGHT_PAR       shift and go to state 91


state 74

    (18) funcDeclaration -> PRINT LEFT_PAR factor . RIGHT_PAR

    RIGHT_PAR       shift and go to state 92


state 75

    (58) factor -> variable .
    (20) sumLessExpression -> variable . PLUS_ONE
    (21) sumLessExpression -> variable . MINUS_ONE

    RIGHT_PAR       reduce using rule 58 (factor -> variable .)
    STAR            reduce using rule 58 (factor -> variable .)
    BETWEEN         reduce using rule 58 (factor -> variable .)
    MINUS           reduce using rule 58 (factor -> variable .)
    PLUS            reduce using rule 58 (factor -> variable .)
    IF              reduce using rule 58 (factor -> variable .)
    WHILE           reduce using rule 58 (factor -> variable .)
    USE             reduce using rule 58 (factor -> variable .)
    DOLLAR          reduce using rule 58 (factor -> variable .)
    TRUE            reduce using rule 58 (factor -> variable .)
    FALSE           reduce using rule 58 (factor -> variable .)
    PRINT           reduce using rule 58 (factor -> variable .)
    STRING          reduce using rule 58 (factor -> variable .)
    IDENTIFIER      reduce using rule 58 (factor -> variable .)
    LEFT_PAR        reduce using rule 58 (factor -> variable .)
    INTEGER         reduce using rule 58 (factor -> variable .)
    FLOAT           reduce using rule 58 (factor -> variable .)
    $end            reduce using rule 58 (factor -> variable .)
    LESS_OR_EQUAL   reduce using rule 58 (factor -> variable .)
    LESS_THAN       reduce using rule 58 (factor -> variable .)
    MORE_THAN       reduce using rule 58 (factor -> variable .)
    GREATER_OR_EQUAL reduce using rule 58 (factor -> variable .)
    EQ              reduce using rule 58 (factor -> variable .)
    NEQ             reduce using rule 58 (factor -> variable .)
    RIGHT_BRACE     reduce using rule 58 (factor -> variable .)
    PLUS_ONE        shift and go to state 52
    MINUS_ONE       shift and go to state 53


state 76

    (50) term -> multiNegExp multiSign term .

    MINUS           reduce using rule 50 (term -> multiNegExp multiSign term .)
    PLUS            reduce using rule 50 (term -> multiNegExp multiSign term .)
    IF              reduce using rule 50 (term -> multiNegExp multiSign term .)
    WHILE           reduce using rule 50 (term -> multiNegExp multiSign term .)
    USE             reduce using rule 50 (term -> multiNegExp multiSign term .)
    DOLLAR          reduce using rule 50 (term -> multiNegExp multiSign term .)
    TRUE            reduce using rule 50 (term -> multiNegExp multiSign term .)
    FALSE           reduce using rule 50 (term -> multiNegExp multiSign term .)
    PRINT           reduce using rule 50 (term -> multiNegExp multiSign term .)
    STRING          reduce using rule 50 (term -> multiNegExp multiSign term .)
    IDENTIFIER      reduce using rule 50 (term -> multiNegExp multiSign term .)
    LEFT_PAR        reduce using rule 50 (term -> multiNegExp multiSign term .)
    INTEGER         reduce using rule 50 (term -> multiNegExp multiSign term .)
    FLOAT           reduce using rule 50 (term -> multiNegExp multiSign term .)
    $end            reduce using rule 50 (term -> multiNegExp multiSign term .)
    LESS_OR_EQUAL   reduce using rule 50 (term -> multiNegExp multiSign term .)
    LESS_THAN       reduce using rule 50 (term -> multiNegExp multiSign term .)
    MORE_THAN       reduce using rule 50 (term -> multiNegExp multiSign term .)
    GREATER_OR_EQUAL reduce using rule 50 (term -> multiNegExp multiSign term .)
    EQ              reduce using rule 50 (term -> multiNegExp multiSign term .)
    NEQ             reduce using rule 50 (term -> multiNegExp multiSign term .)
    RIGHT_PAR       reduce using rule 50 (term -> multiNegExp multiSign term .)
    RIGHT_BRACE     reduce using rule 50 (term -> multiNegExp multiSign term .)


state 77

    (35) andExp -> TRUE AND compExp .

    RIGHT_PAR       reduce using rule 35 (andExp -> TRUE AND compExp .)
    IF              reduce using rule 35 (andExp -> TRUE AND compExp .)
    WHILE           reduce using rule 35 (andExp -> TRUE AND compExp .)
    USE             reduce using rule 35 (andExp -> TRUE AND compExp .)
    DOLLAR          reduce using rule 35 (andExp -> TRUE AND compExp .)
    TRUE            reduce using rule 35 (andExp -> TRUE AND compExp .)
    FALSE           reduce using rule 35 (andExp -> TRUE AND compExp .)
    PRINT           reduce using rule 35 (andExp -> TRUE AND compExp .)
    MINUS           reduce using rule 35 (andExp -> TRUE AND compExp .)
    PLUS            reduce using rule 35 (andExp -> TRUE AND compExp .)
    STRING          reduce using rule 35 (andExp -> TRUE AND compExp .)
    IDENTIFIER      reduce using rule 35 (andExp -> TRUE AND compExp .)
    LEFT_PAR        reduce using rule 35 (andExp -> TRUE AND compExp .)
    INTEGER         reduce using rule 35 (andExp -> TRUE AND compExp .)
    FLOAT           reduce using rule 35 (andExp -> TRUE AND compExp .)
    $end            reduce using rule 35 (andExp -> TRUE AND compExp .)
    RIGHT_BRACE     reduce using rule 35 (andExp -> TRUE AND compExp .)


state 78

    (35) andExp -> TRUE . AND compExp
    (15) variableType -> TRUE .

    AND             shift and go to state 45
    IF              reduce using rule 15 (variableType -> TRUE .)
    WHILE           reduce using rule 15 (variableType -> TRUE .)
    USE             reduce using rule 15 (variableType -> TRUE .)
    DOLLAR          reduce using rule 15 (variableType -> TRUE .)
    TRUE            reduce using rule 15 (variableType -> TRUE .)
    FALSE           reduce using rule 15 (variableType -> TRUE .)
    PRINT           reduce using rule 15 (variableType -> TRUE .)
    MINUS           reduce using rule 15 (variableType -> TRUE .)
    PLUS            reduce using rule 15 (variableType -> TRUE .)
    STRING          reduce using rule 15 (variableType -> TRUE .)
    IDENTIFIER      reduce using rule 15 (variableType -> TRUE .)
    LEFT_PAR        reduce using rule 15 (variableType -> TRUE .)
    INTEGER         reduce using rule 15 (variableType -> TRUE .)
    FLOAT           reduce using rule 15 (variableType -> TRUE .)
    $end            reduce using rule 15 (variableType -> TRUE .)
    RIGHT_PAR       reduce using rule 15 (variableType -> TRUE .)
    STAR            reduce using rule 15 (variableType -> TRUE .)
    BETWEEN         reduce using rule 15 (variableType -> TRUE .)
    LESS_OR_EQUAL   reduce using rule 15 (variableType -> TRUE .)
    LESS_THAN       reduce using rule 15 (variableType -> TRUE .)
    MORE_THAN       reduce using rule 15 (variableType -> TRUE .)
    GREATER_OR_EQUAL reduce using rule 15 (variableType -> TRUE .)
    EQ              reduce using rule 15 (variableType -> TRUE .)
    NEQ             reduce using rule 15 (variableType -> TRUE .)
    RIGHT_BRACE     reduce using rule 15 (variableType -> TRUE .)


state 79

    (32) logicalExp -> TRUE OR andExp .

    RIGHT_PAR       reduce using rule 32 (logicalExp -> TRUE OR andExp .)
    IF              reduce using rule 32 (logicalExp -> TRUE OR andExp .)
    WHILE           reduce using rule 32 (logicalExp -> TRUE OR andExp .)
    USE             reduce using rule 32 (logicalExp -> TRUE OR andExp .)
    DOLLAR          reduce using rule 32 (logicalExp -> TRUE OR andExp .)
    TRUE            reduce using rule 32 (logicalExp -> TRUE OR andExp .)
    FALSE           reduce using rule 32 (logicalExp -> TRUE OR andExp .)
    PRINT           reduce using rule 32 (logicalExp -> TRUE OR andExp .)
    MINUS           reduce using rule 32 (logicalExp -> TRUE OR andExp .)
    PLUS            reduce using rule 32 (logicalExp -> TRUE OR andExp .)
    STRING          reduce using rule 32 (logicalExp -> TRUE OR andExp .)
    IDENTIFIER      reduce using rule 32 (logicalExp -> TRUE OR andExp .)
    LEFT_PAR        reduce using rule 32 (logicalExp -> TRUE OR andExp .)
    INTEGER         reduce using rule 32 (logicalExp -> TRUE OR andExp .)
    FLOAT           reduce using rule 32 (logicalExp -> TRUE OR andExp .)
    $end            reduce using rule 32 (logicalExp -> TRUE OR andExp .)
    RIGHT_BRACE     reduce using rule 32 (logicalExp -> TRUE OR andExp .)


state 80

    (36) andExp -> FALSE . AND compExp
    (16) variableType -> FALSE .

    AND             shift and go to state 56
    IF              reduce using rule 16 (variableType -> FALSE .)
    WHILE           reduce using rule 16 (variableType -> FALSE .)
    USE             reduce using rule 16 (variableType -> FALSE .)
    DOLLAR          reduce using rule 16 (variableType -> FALSE .)
    TRUE            reduce using rule 16 (variableType -> FALSE .)
    FALSE           reduce using rule 16 (variableType -> FALSE .)
    PRINT           reduce using rule 16 (variableType -> FALSE .)
    MINUS           reduce using rule 16 (variableType -> FALSE .)
    PLUS            reduce using rule 16 (variableType -> FALSE .)
    STRING          reduce using rule 16 (variableType -> FALSE .)
    IDENTIFIER      reduce using rule 16 (variableType -> FALSE .)
    LEFT_PAR        reduce using rule 16 (variableType -> FALSE .)
    INTEGER         reduce using rule 16 (variableType -> FALSE .)
    FLOAT           reduce using rule 16 (variableType -> FALSE .)
    $end            reduce using rule 16 (variableType -> FALSE .)
    RIGHT_PAR       reduce using rule 16 (variableType -> FALSE .)
    STAR            reduce using rule 16 (variableType -> FALSE .)
    BETWEEN         reduce using rule 16 (variableType -> FALSE .)
    LESS_OR_EQUAL   reduce using rule 16 (variableType -> FALSE .)
    LESS_THAN       reduce using rule 16 (variableType -> FALSE .)
    MORE_THAN       reduce using rule 16 (variableType -> FALSE .)
    GREATER_OR_EQUAL reduce using rule 16 (variableType -> FALSE .)
    EQ              reduce using rule 16 (variableType -> FALSE .)
    NEQ             reduce using rule 16 (variableType -> FALSE .)
    RIGHT_BRACE     reduce using rule 16 (variableType -> FALSE .)


state 81

    (46) sumExp -> term sumSign sumExp .

    IF              reduce using rule 46 (sumExp -> term sumSign sumExp .)
    WHILE           reduce using rule 46 (sumExp -> term sumSign sumExp .)
    USE             reduce using rule 46 (sumExp -> term sumSign sumExp .)
    DOLLAR          reduce using rule 46 (sumExp -> term sumSign sumExp .)
    TRUE            reduce using rule 46 (sumExp -> term sumSign sumExp .)
    FALSE           reduce using rule 46 (sumExp -> term sumSign sumExp .)
    PRINT           reduce using rule 46 (sumExp -> term sumSign sumExp .)
    MINUS           reduce using rule 46 (sumExp -> term sumSign sumExp .)
    PLUS            reduce using rule 46 (sumExp -> term sumSign sumExp .)
    STRING          reduce using rule 46 (sumExp -> term sumSign sumExp .)
    IDENTIFIER      reduce using rule 46 (sumExp -> term sumSign sumExp .)
    LEFT_PAR        reduce using rule 46 (sumExp -> term sumSign sumExp .)
    INTEGER         reduce using rule 46 (sumExp -> term sumSign sumExp .)
    FLOAT           reduce using rule 46 (sumExp -> term sumSign sumExp .)
    $end            reduce using rule 46 (sumExp -> term sumSign sumExp .)
    LESS_OR_EQUAL   reduce using rule 46 (sumExp -> term sumSign sumExp .)
    LESS_THAN       reduce using rule 46 (sumExp -> term sumSign sumExp .)
    MORE_THAN       reduce using rule 46 (sumExp -> term sumSign sumExp .)
    GREATER_OR_EQUAL reduce using rule 46 (sumExp -> term sumSign sumExp .)
    EQ              reduce using rule 46 (sumExp -> term sumSign sumExp .)
    NEQ             reduce using rule 46 (sumExp -> term sumSign sumExp .)
    RIGHT_PAR       reduce using rule 46 (sumExp -> term sumSign sumExp .)
    RIGHT_BRACE     reduce using rule 46 (sumExp -> term sumSign sumExp .)


state 82

    (10) varDeclaration -> variable ASSIGN STDIN .

    IF              reduce using rule 10 (varDeclaration -> variable ASSIGN STDIN .)
    WHILE           reduce using rule 10 (varDeclaration -> variable ASSIGN STDIN .)
    USE             reduce using rule 10 (varDeclaration -> variable ASSIGN STDIN .)
    DOLLAR          reduce using rule 10 (varDeclaration -> variable ASSIGN STDIN .)
    TRUE            reduce using rule 10 (varDeclaration -> variable ASSIGN STDIN .)
    FALSE           reduce using rule 10 (varDeclaration -> variable ASSIGN STDIN .)
    PRINT           reduce using rule 10 (varDeclaration -> variable ASSIGN STDIN .)
    MINUS           reduce using rule 10 (varDeclaration -> variable ASSIGN STDIN .)
    PLUS            reduce using rule 10 (varDeclaration -> variable ASSIGN STDIN .)
    STRING          reduce using rule 10 (varDeclaration -> variable ASSIGN STDIN .)
    IDENTIFIER      reduce using rule 10 (varDeclaration -> variable ASSIGN STDIN .)
    LEFT_PAR        reduce using rule 10 (varDeclaration -> variable ASSIGN STDIN .)
    INTEGER         reduce using rule 10 (varDeclaration -> variable ASSIGN STDIN .)
    FLOAT           reduce using rule 10 (varDeclaration -> variable ASSIGN STDIN .)
    $end            reduce using rule 10 (varDeclaration -> variable ASSIGN STDIN .)
    RIGHT_BRACE     reduce using rule 10 (varDeclaration -> variable ASSIGN STDIN .)


state 83

    (9) varDeclaration -> variable ASSIGN sumExp .

    IF              reduce using rule 9 (varDeclaration -> variable ASSIGN sumExp .)
    WHILE           reduce using rule 9 (varDeclaration -> variable ASSIGN sumExp .)
    USE             reduce using rule 9 (varDeclaration -> variable ASSIGN sumExp .)
    DOLLAR          reduce using rule 9 (varDeclaration -> variable ASSIGN sumExp .)
    TRUE            reduce using rule 9 (varDeclaration -> variable ASSIGN sumExp .)
    FALSE           reduce using rule 9 (varDeclaration -> variable ASSIGN sumExp .)
    PRINT           reduce using rule 9 (varDeclaration -> variable ASSIGN sumExp .)
    MINUS           reduce using rule 9 (varDeclaration -> variable ASSIGN sumExp .)
    PLUS            reduce using rule 9 (varDeclaration -> variable ASSIGN sumExp .)
    STRING          reduce using rule 9 (varDeclaration -> variable ASSIGN sumExp .)
    IDENTIFIER      reduce using rule 9 (varDeclaration -> variable ASSIGN sumExp .)
    LEFT_PAR        reduce using rule 9 (varDeclaration -> variable ASSIGN sumExp .)
    INTEGER         reduce using rule 9 (varDeclaration -> variable ASSIGN sumExp .)
    FLOAT           reduce using rule 9 (varDeclaration -> variable ASSIGN sumExp .)
    $end            reduce using rule 9 (varDeclaration -> variable ASSIGN sumExp .)
    RIGHT_BRACE     reduce using rule 9 (varDeclaration -> variable ASSIGN sumExp .)


state 84

    (27) matchedif -> IF LEFT_PAR logicalExp . RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE ELSE LEFT_BRACE declarationList RIGHT_BRACE
    (28) unmatchedif -> IF LEFT_PAR logicalExp . RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE

    RIGHT_PAR       shift and go to state 93


state 85

    (36) andExp -> FALSE AND compExp .

    RIGHT_PAR       reduce using rule 36 (andExp -> FALSE AND compExp .)
    IF              reduce using rule 36 (andExp -> FALSE AND compExp .)
    WHILE           reduce using rule 36 (andExp -> FALSE AND compExp .)
    USE             reduce using rule 36 (andExp -> FALSE AND compExp .)
    DOLLAR          reduce using rule 36 (andExp -> FALSE AND compExp .)
    TRUE            reduce using rule 36 (andExp -> FALSE AND compExp .)
    FALSE           reduce using rule 36 (andExp -> FALSE AND compExp .)
    PRINT           reduce using rule 36 (andExp -> FALSE AND compExp .)
    MINUS           reduce using rule 36 (andExp -> FALSE AND compExp .)
    PLUS            reduce using rule 36 (andExp -> FALSE AND compExp .)
    STRING          reduce using rule 36 (andExp -> FALSE AND compExp .)
    IDENTIFIER      reduce using rule 36 (andExp -> FALSE AND compExp .)
    LEFT_PAR        reduce using rule 36 (andExp -> FALSE AND compExp .)
    INTEGER         reduce using rule 36 (andExp -> FALSE AND compExp .)
    FLOAT           reduce using rule 36 (andExp -> FALSE AND compExp .)
    $end            reduce using rule 36 (andExp -> FALSE AND compExp .)
    RIGHT_BRACE     reduce using rule 36 (andExp -> FALSE AND compExp .)


state 86

    (33) logicalExp -> FALSE OR andExp .

    RIGHT_PAR       reduce using rule 33 (logicalExp -> FALSE OR andExp .)
    IF              reduce using rule 33 (logicalExp -> FALSE OR andExp .)
    WHILE           reduce using rule 33 (logicalExp -> FALSE OR andExp .)
    USE             reduce using rule 33 (logicalExp -> FALSE OR andExp .)
    DOLLAR          reduce using rule 33 (logicalExp -> FALSE OR andExp .)
    TRUE            reduce using rule 33 (logicalExp -> FALSE OR andExp .)
    FALSE           reduce using rule 33 (logicalExp -> FALSE OR andExp .)
    PRINT           reduce using rule 33 (logicalExp -> FALSE OR andExp .)
    MINUS           reduce using rule 33 (logicalExp -> FALSE OR andExp .)
    PLUS            reduce using rule 33 (logicalExp -> FALSE OR andExp .)
    STRING          reduce using rule 33 (logicalExp -> FALSE OR andExp .)
    IDENTIFIER      reduce using rule 33 (logicalExp -> FALSE OR andExp .)
    LEFT_PAR        reduce using rule 33 (logicalExp -> FALSE OR andExp .)
    INTEGER         reduce using rule 33 (logicalExp -> FALSE OR andExp .)
    FLOAT           reduce using rule 33 (logicalExp -> FALSE OR andExp .)
    $end            reduce using rule 33 (logicalExp -> FALSE OR andExp .)
    RIGHT_BRACE     reduce using rule 33 (logicalExp -> FALSE OR andExp .)


state 87

    (38) compExp -> sumExp compSign sumExp .

    RIGHT_PAR       reduce using rule 38 (compExp -> sumExp compSign sumExp .)
    IF              reduce using rule 38 (compExp -> sumExp compSign sumExp .)
    WHILE           reduce using rule 38 (compExp -> sumExp compSign sumExp .)
    USE             reduce using rule 38 (compExp -> sumExp compSign sumExp .)
    DOLLAR          reduce using rule 38 (compExp -> sumExp compSign sumExp .)
    TRUE            reduce using rule 38 (compExp -> sumExp compSign sumExp .)
    FALSE           reduce using rule 38 (compExp -> sumExp compSign sumExp .)
    PRINT           reduce using rule 38 (compExp -> sumExp compSign sumExp .)
    MINUS           reduce using rule 38 (compExp -> sumExp compSign sumExp .)
    PLUS            reduce using rule 38 (compExp -> sumExp compSign sumExp .)
    STRING          reduce using rule 38 (compExp -> sumExp compSign sumExp .)
    IDENTIFIER      reduce using rule 38 (compExp -> sumExp compSign sumExp .)
    LEFT_PAR        reduce using rule 38 (compExp -> sumExp compSign sumExp .)
    INTEGER         reduce using rule 38 (compExp -> sumExp compSign sumExp .)
    FLOAT           reduce using rule 38 (compExp -> sumExp compSign sumExp .)
    $end            reduce using rule 38 (compExp -> sumExp compSign sumExp .)
    RIGHT_BRACE     reduce using rule 38 (compExp -> sumExp compSign sumExp .)


state 88

    (61) factor -> LEFT_PAR expression RIGHT_PAR .

    RIGHT_PAR       reduce using rule 61 (factor -> LEFT_PAR expression RIGHT_PAR .)
    STAR            reduce using rule 61 (factor -> LEFT_PAR expression RIGHT_PAR .)
    BETWEEN         reduce using rule 61 (factor -> LEFT_PAR expression RIGHT_PAR .)
    MINUS           reduce using rule 61 (factor -> LEFT_PAR expression RIGHT_PAR .)
    PLUS            reduce using rule 61 (factor -> LEFT_PAR expression RIGHT_PAR .)
    IF              reduce using rule 61 (factor -> LEFT_PAR expression RIGHT_PAR .)
    WHILE           reduce using rule 61 (factor -> LEFT_PAR expression RIGHT_PAR .)
    USE             reduce using rule 61 (factor -> LEFT_PAR expression RIGHT_PAR .)
    DOLLAR          reduce using rule 61 (factor -> LEFT_PAR expression RIGHT_PAR .)
    TRUE            reduce using rule 61 (factor -> LEFT_PAR expression RIGHT_PAR .)
    FALSE           reduce using rule 61 (factor -> LEFT_PAR expression RIGHT_PAR .)
    PRINT           reduce using rule 61 (factor -> LEFT_PAR expression RIGHT_PAR .)
    STRING          reduce using rule 61 (factor -> LEFT_PAR expression RIGHT_PAR .)
    IDENTIFIER      reduce using rule 61 (factor -> LEFT_PAR expression RIGHT_PAR .)
    LEFT_PAR        reduce using rule 61 (factor -> LEFT_PAR expression RIGHT_PAR .)
    INTEGER         reduce using rule 61 (factor -> LEFT_PAR expression RIGHT_PAR .)
    FLOAT           reduce using rule 61 (factor -> LEFT_PAR expression RIGHT_PAR .)
    $end            reduce using rule 61 (factor -> LEFT_PAR expression RIGHT_PAR .)
    LESS_OR_EQUAL   reduce using rule 61 (factor -> LEFT_PAR expression RIGHT_PAR .)
    LESS_THAN       reduce using rule 61 (factor -> LEFT_PAR expression RIGHT_PAR .)
    MORE_THAN       reduce using rule 61 (factor -> LEFT_PAR expression RIGHT_PAR .)
    GREATER_OR_EQUAL reduce using rule 61 (factor -> LEFT_PAR expression RIGHT_PAR .)
    EQ              reduce using rule 61 (factor -> LEFT_PAR expression RIGHT_PAR .)
    NEQ             reduce using rule 61 (factor -> LEFT_PAR expression RIGHT_PAR .)
    RIGHT_BRACE     reduce using rule 61 (factor -> LEFT_PAR expression RIGHT_PAR .)


state 89

    (17) constDeclaration -> USE CONSTANT IDENTIFIER CONST_ASSIGN . variableType
    (11) variableType -> . number
    (14) variableType -> . STRING
    (15) variableType -> . TRUE
    (16) variableType -> . FALSE
    (12) number -> . INTEGER
    (13) number -> . FLOAT

    STRING          shift and go to state 10
    TRUE            shift and go to state 58
    FALSE           shift and go to state 61
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 32

    variableType                   shift and go to state 94
    number                         shift and go to state 11

state 90

    (29) loopStmt -> WHILE LEFT_PAR logicalExp RIGHT_PAR . LEFT_BRACE declarationList RIGHT_BRACE

    LEFT_BRACE      shift and go to state 95


state 91

    (19) funcDeclaration -> PRINT LEFT_PAR sumLessExpression RIGHT_PAR .

    IF              reduce using rule 19 (funcDeclaration -> PRINT LEFT_PAR sumLessExpression RIGHT_PAR .)
    WHILE           reduce using rule 19 (funcDeclaration -> PRINT LEFT_PAR sumLessExpression RIGHT_PAR .)
    USE             reduce using rule 19 (funcDeclaration -> PRINT LEFT_PAR sumLessExpression RIGHT_PAR .)
    DOLLAR          reduce using rule 19 (funcDeclaration -> PRINT LEFT_PAR sumLessExpression RIGHT_PAR .)
    TRUE            reduce using rule 19 (funcDeclaration -> PRINT LEFT_PAR sumLessExpression RIGHT_PAR .)
    FALSE           reduce using rule 19 (funcDeclaration -> PRINT LEFT_PAR sumLessExpression RIGHT_PAR .)
    PRINT           reduce using rule 19 (funcDeclaration -> PRINT LEFT_PAR sumLessExpression RIGHT_PAR .)
    MINUS           reduce using rule 19 (funcDeclaration -> PRINT LEFT_PAR sumLessExpression RIGHT_PAR .)
    PLUS            reduce using rule 19 (funcDeclaration -> PRINT LEFT_PAR sumLessExpression RIGHT_PAR .)
    STRING          reduce using rule 19 (funcDeclaration -> PRINT LEFT_PAR sumLessExpression RIGHT_PAR .)
    IDENTIFIER      reduce using rule 19 (funcDeclaration -> PRINT LEFT_PAR sumLessExpression RIGHT_PAR .)
    LEFT_PAR        reduce using rule 19 (funcDeclaration -> PRINT LEFT_PAR sumLessExpression RIGHT_PAR .)
    INTEGER         reduce using rule 19 (funcDeclaration -> PRINT LEFT_PAR sumLessExpression RIGHT_PAR .)
    FLOAT           reduce using rule 19 (funcDeclaration -> PRINT LEFT_PAR sumLessExpression RIGHT_PAR .)
    $end            reduce using rule 19 (funcDeclaration -> PRINT LEFT_PAR sumLessExpression RIGHT_PAR .)
    RIGHT_BRACE     reduce using rule 19 (funcDeclaration -> PRINT LEFT_PAR sumLessExpression RIGHT_PAR .)


state 92

    (18) funcDeclaration -> PRINT LEFT_PAR factor RIGHT_PAR .

    IF              reduce using rule 18 (funcDeclaration -> PRINT LEFT_PAR factor RIGHT_PAR .)
    WHILE           reduce using rule 18 (funcDeclaration -> PRINT LEFT_PAR factor RIGHT_PAR .)
    USE             reduce using rule 18 (funcDeclaration -> PRINT LEFT_PAR factor RIGHT_PAR .)
    DOLLAR          reduce using rule 18 (funcDeclaration -> PRINT LEFT_PAR factor RIGHT_PAR .)
    TRUE            reduce using rule 18 (funcDeclaration -> PRINT LEFT_PAR factor RIGHT_PAR .)
    FALSE           reduce using rule 18 (funcDeclaration -> PRINT LEFT_PAR factor RIGHT_PAR .)
    PRINT           reduce using rule 18 (funcDeclaration -> PRINT LEFT_PAR factor RIGHT_PAR .)
    MINUS           reduce using rule 18 (funcDeclaration -> PRINT LEFT_PAR factor RIGHT_PAR .)
    PLUS            reduce using rule 18 (funcDeclaration -> PRINT LEFT_PAR factor RIGHT_PAR .)
    STRING          reduce using rule 18 (funcDeclaration -> PRINT LEFT_PAR factor RIGHT_PAR .)
    IDENTIFIER      reduce using rule 18 (funcDeclaration -> PRINT LEFT_PAR factor RIGHT_PAR .)
    LEFT_PAR        reduce using rule 18 (funcDeclaration -> PRINT LEFT_PAR factor RIGHT_PAR .)
    INTEGER         reduce using rule 18 (funcDeclaration -> PRINT LEFT_PAR factor RIGHT_PAR .)
    FLOAT           reduce using rule 18 (funcDeclaration -> PRINT LEFT_PAR factor RIGHT_PAR .)
    $end            reduce using rule 18 (funcDeclaration -> PRINT LEFT_PAR factor RIGHT_PAR .)
    RIGHT_BRACE     reduce using rule 18 (funcDeclaration -> PRINT LEFT_PAR factor RIGHT_PAR .)


state 93

    (27) matchedif -> IF LEFT_PAR logicalExp RIGHT_PAR . LEFT_BRACE declarationList RIGHT_BRACE ELSE LEFT_BRACE declarationList RIGHT_BRACE
    (28) unmatchedif -> IF LEFT_PAR logicalExp RIGHT_PAR . LEFT_BRACE declarationList RIGHT_BRACE

    LEFT_BRACE      shift and go to state 96


state 94

    (17) constDeclaration -> USE CONSTANT IDENTIFIER CONST_ASSIGN variableType .

    IF              reduce using rule 17 (constDeclaration -> USE CONSTANT IDENTIFIER CONST_ASSIGN variableType .)
    WHILE           reduce using rule 17 (constDeclaration -> USE CONSTANT IDENTIFIER CONST_ASSIGN variableType .)
    USE             reduce using rule 17 (constDeclaration -> USE CONSTANT IDENTIFIER CONST_ASSIGN variableType .)
    DOLLAR          reduce using rule 17 (constDeclaration -> USE CONSTANT IDENTIFIER CONST_ASSIGN variableType .)
    TRUE            reduce using rule 17 (constDeclaration -> USE CONSTANT IDENTIFIER CONST_ASSIGN variableType .)
    FALSE           reduce using rule 17 (constDeclaration -> USE CONSTANT IDENTIFIER CONST_ASSIGN variableType .)
    PRINT           reduce using rule 17 (constDeclaration -> USE CONSTANT IDENTIFIER CONST_ASSIGN variableType .)
    MINUS           reduce using rule 17 (constDeclaration -> USE CONSTANT IDENTIFIER CONST_ASSIGN variableType .)
    PLUS            reduce using rule 17 (constDeclaration -> USE CONSTANT IDENTIFIER CONST_ASSIGN variableType .)
    STRING          reduce using rule 17 (constDeclaration -> USE CONSTANT IDENTIFIER CONST_ASSIGN variableType .)
    IDENTIFIER      reduce using rule 17 (constDeclaration -> USE CONSTANT IDENTIFIER CONST_ASSIGN variableType .)
    LEFT_PAR        reduce using rule 17 (constDeclaration -> USE CONSTANT IDENTIFIER CONST_ASSIGN variableType .)
    INTEGER         reduce using rule 17 (constDeclaration -> USE CONSTANT IDENTIFIER CONST_ASSIGN variableType .)
    FLOAT           reduce using rule 17 (constDeclaration -> USE CONSTANT IDENTIFIER CONST_ASSIGN variableType .)
    $end            reduce using rule 17 (constDeclaration -> USE CONSTANT IDENTIFIER CONST_ASSIGN variableType .)
    RIGHT_BRACE     reduce using rule 17 (constDeclaration -> USE CONSTANT IDENTIFIER CONST_ASSIGN variableType .)


state 95

    (29) loopStmt -> WHILE LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE . declarationList RIGHT_BRACE
    (2) declarationList -> . declaration declarationList
    (3) declarationList -> . declaration
    (4) declaration -> . varDeclaration
    (5) declaration -> . statement
    (6) declaration -> . constDeclaration
    (7) declaration -> . funcDeclaration
    (9) varDeclaration -> . variable ASSIGN sumExp
    (10) varDeclaration -> . variable ASSIGN STDIN
    (22) statement -> . expression
    (23) statement -> . conditionalStmt
    (24) statement -> . loopStmt
    (17) constDeclaration -> . USE CONSTANT IDENTIFIER CONST_ASSIGN variableType
    (18) funcDeclaration -> . PRINT LEFT_PAR factor RIGHT_PAR
    (19) funcDeclaration -> . PRINT LEFT_PAR sumLessExpression RIGHT_PAR
    (8) variable -> . DOLLAR IDENTIFIER
    (30) expression -> . logicalExp
    (31) expression -> . sumLessExpression
    (25) conditionalStmt -> . matchedif
    (26) conditionalStmt -> . unmatchedif
    (29) loopStmt -> . WHILE LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE
    (32) logicalExp -> . TRUE OR andExp
    (33) logicalExp -> . FALSE OR andExp
    (34) logicalExp -> . andExp
    (20) sumLessExpression -> . variable PLUS_ONE
    (21) sumLessExpression -> . variable MINUS_ONE
    (27) matchedif -> . IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE ELSE LEFT_BRACE declarationList RIGHT_BRACE
    (28) unmatchedif -> . IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE
    (35) andExp -> . TRUE AND compExp
    (36) andExp -> . FALSE AND compExp
    (37) andExp -> . compExp
    (38) compExp -> . sumExp compSign sumExp
    (39) compExp -> . sumExp
    (46) sumExp -> . term sumSign sumExp
    (47) sumExp -> . term
    (50) term -> . multiNegExp multiSign term
    (51) term -> . multiNegExp
    (54) multiNegExp -> . unaryOp multiNegExp
    (55) multiNegExp -> . factor
    (56) unaryOp -> . MINUS
    (57) unaryOp -> . PLUS
    (58) factor -> . variable
    (59) factor -> . variableType
    (60) factor -> . IDENTIFIER
    (61) factor -> . LEFT_PAR expression RIGHT_PAR
    (11) variableType -> . number
    (14) variableType -> . STRING
    (15) variableType -> . TRUE
    (16) variableType -> . FALSE
    (12) number -> . INTEGER
    (13) number -> . FLOAT

    USE             shift and go to state 1
    PRINT           shift and go to state 6
    DOLLAR          shift and go to state 24
    WHILE           shift and go to state 5
    TRUE            shift and go to state 13
    FALSE           shift and go to state 30
    IF              shift and go to state 28
    MINUS           shift and go to state 14
    PLUS            shift and go to state 16
    IDENTIFIER      shift and go to state 20
    LEFT_PAR        shift and go to state 36
    STRING          shift and go to state 10
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 32

    varDeclaration                 shift and go to state 2
    variableType                   shift and go to state 7
    matchedif                      shift and go to state 3
    number                         shift and go to state 11
    loopStmt                       shift and go to state 4
    logicalExp                     shift and go to state 8
    multiNegExp                    shift and go to state 9
    conditionalStmt                shift and go to state 12
    statement                      shift and go to state 17
    factor                         shift and go to state 18
    sumLessExpression              shift and go to state 21
    constDeclaration               shift and go to state 22
    declarationList                shift and go to state 97
    andExp                         shift and go to state 29
    declaration                    shift and go to state 26
    variable                       shift and go to state 27
    term                           shift and go to state 25
    unaryOp                        shift and go to state 31
    compExp                        shift and go to state 33
    sumExp                         shift and go to state 34
    funcDeclaration                shift and go to state 35
    unmatchedif                    shift and go to state 37
    expression                     shift and go to state 38

state 96

    (27) matchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE . declarationList RIGHT_BRACE ELSE LEFT_BRACE declarationList RIGHT_BRACE
    (28) unmatchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE . declarationList RIGHT_BRACE
    (2) declarationList -> . declaration declarationList
    (3) declarationList -> . declaration
    (4) declaration -> . varDeclaration
    (5) declaration -> . statement
    (6) declaration -> . constDeclaration
    (7) declaration -> . funcDeclaration
    (9) varDeclaration -> . variable ASSIGN sumExp
    (10) varDeclaration -> . variable ASSIGN STDIN
    (22) statement -> . expression
    (23) statement -> . conditionalStmt
    (24) statement -> . loopStmt
    (17) constDeclaration -> . USE CONSTANT IDENTIFIER CONST_ASSIGN variableType
    (18) funcDeclaration -> . PRINT LEFT_PAR factor RIGHT_PAR
    (19) funcDeclaration -> . PRINT LEFT_PAR sumLessExpression RIGHT_PAR
    (8) variable -> . DOLLAR IDENTIFIER
    (30) expression -> . logicalExp
    (31) expression -> . sumLessExpression
    (25) conditionalStmt -> . matchedif
    (26) conditionalStmt -> . unmatchedif
    (29) loopStmt -> . WHILE LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE
    (32) logicalExp -> . TRUE OR andExp
    (33) logicalExp -> . FALSE OR andExp
    (34) logicalExp -> . andExp
    (20) sumLessExpression -> . variable PLUS_ONE
    (21) sumLessExpression -> . variable MINUS_ONE
    (27) matchedif -> . IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE ELSE LEFT_BRACE declarationList RIGHT_BRACE
    (28) unmatchedif -> . IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE
    (35) andExp -> . TRUE AND compExp
    (36) andExp -> . FALSE AND compExp
    (37) andExp -> . compExp
    (38) compExp -> . sumExp compSign sumExp
    (39) compExp -> . sumExp
    (46) sumExp -> . term sumSign sumExp
    (47) sumExp -> . term
    (50) term -> . multiNegExp multiSign term
    (51) term -> . multiNegExp
    (54) multiNegExp -> . unaryOp multiNegExp
    (55) multiNegExp -> . factor
    (56) unaryOp -> . MINUS
    (57) unaryOp -> . PLUS
    (58) factor -> . variable
    (59) factor -> . variableType
    (60) factor -> . IDENTIFIER
    (61) factor -> . LEFT_PAR expression RIGHT_PAR
    (11) variableType -> . number
    (14) variableType -> . STRING
    (15) variableType -> . TRUE
    (16) variableType -> . FALSE
    (12) number -> . INTEGER
    (13) number -> . FLOAT

    USE             shift and go to state 1
    PRINT           shift and go to state 6
    DOLLAR          shift and go to state 24
    WHILE           shift and go to state 5
    TRUE            shift and go to state 13
    FALSE           shift and go to state 30
    IF              shift and go to state 28
    MINUS           shift and go to state 14
    PLUS            shift and go to state 16
    IDENTIFIER      shift and go to state 20
    LEFT_PAR        shift and go to state 36
    STRING          shift and go to state 10
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 32

    varDeclaration                 shift and go to state 2
    variableType                   shift and go to state 7
    matchedif                      shift and go to state 3
    number                         shift and go to state 11
    loopStmt                       shift and go to state 4
    logicalExp                     shift and go to state 8
    multiNegExp                    shift and go to state 9
    conditionalStmt                shift and go to state 12
    statement                      shift and go to state 17
    factor                         shift and go to state 18
    sumLessExpression              shift and go to state 21
    constDeclaration               shift and go to state 22
    declarationList                shift and go to state 98
    andExp                         shift and go to state 29
    declaration                    shift and go to state 26
    variable                       shift and go to state 27
    term                           shift and go to state 25
    unaryOp                        shift and go to state 31
    compExp                        shift and go to state 33
    sumExp                         shift and go to state 34
    funcDeclaration                shift and go to state 35
    unmatchedif                    shift and go to state 37
    expression                     shift and go to state 38

state 97

    (29) loopStmt -> WHILE LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 99


state 98

    (27) matchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList . RIGHT_BRACE ELSE LEFT_BRACE declarationList RIGHT_BRACE
    (28) unmatchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 100


state 99

    (29) loopStmt -> WHILE LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .

    IF              reduce using rule 29 (loopStmt -> WHILE LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)
    WHILE           reduce using rule 29 (loopStmt -> WHILE LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)
    USE             reduce using rule 29 (loopStmt -> WHILE LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)
    DOLLAR          reduce using rule 29 (loopStmt -> WHILE LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)
    TRUE            reduce using rule 29 (loopStmt -> WHILE LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)
    FALSE           reduce using rule 29 (loopStmt -> WHILE LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)
    PRINT           reduce using rule 29 (loopStmt -> WHILE LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)
    MINUS           reduce using rule 29 (loopStmt -> WHILE LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)
    PLUS            reduce using rule 29 (loopStmt -> WHILE LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)
    STRING          reduce using rule 29 (loopStmt -> WHILE LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)
    IDENTIFIER      reduce using rule 29 (loopStmt -> WHILE LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)
    LEFT_PAR        reduce using rule 29 (loopStmt -> WHILE LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)
    INTEGER         reduce using rule 29 (loopStmt -> WHILE LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)
    FLOAT           reduce using rule 29 (loopStmt -> WHILE LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)
    $end            reduce using rule 29 (loopStmt -> WHILE LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 29 (loopStmt -> WHILE LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)


state 100

    (27) matchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE . ELSE LEFT_BRACE declarationList RIGHT_BRACE
    (28) unmatchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .

    ELSE            shift and go to state 101
    IF              reduce using rule 28 (unmatchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)
    WHILE           reduce using rule 28 (unmatchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)
    USE             reduce using rule 28 (unmatchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)
    DOLLAR          reduce using rule 28 (unmatchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)
    TRUE            reduce using rule 28 (unmatchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)
    FALSE           reduce using rule 28 (unmatchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)
    PRINT           reduce using rule 28 (unmatchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)
    MINUS           reduce using rule 28 (unmatchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)
    PLUS            reduce using rule 28 (unmatchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)
    STRING          reduce using rule 28 (unmatchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)
    IDENTIFIER      reduce using rule 28 (unmatchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)
    LEFT_PAR        reduce using rule 28 (unmatchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)
    INTEGER         reduce using rule 28 (unmatchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)
    FLOAT           reduce using rule 28 (unmatchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)
    $end            reduce using rule 28 (unmatchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 28 (unmatchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE .)


state 101

    (27) matchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE ELSE . LEFT_BRACE declarationList RIGHT_BRACE

    LEFT_BRACE      shift and go to state 102


state 102

    (27) matchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE ELSE LEFT_BRACE . declarationList RIGHT_BRACE
    (2) declarationList -> . declaration declarationList
    (3) declarationList -> . declaration
    (4) declaration -> . varDeclaration
    (5) declaration -> . statement
    (6) declaration -> . constDeclaration
    (7) declaration -> . funcDeclaration
    (9) varDeclaration -> . variable ASSIGN sumExp
    (10) varDeclaration -> . variable ASSIGN STDIN
    (22) statement -> . expression
    (23) statement -> . conditionalStmt
    (24) statement -> . loopStmt
    (17) constDeclaration -> . USE CONSTANT IDENTIFIER CONST_ASSIGN variableType
    (18) funcDeclaration -> . PRINT LEFT_PAR factor RIGHT_PAR
    (19) funcDeclaration -> . PRINT LEFT_PAR sumLessExpression RIGHT_PAR
    (8) variable -> . DOLLAR IDENTIFIER
    (30) expression -> . logicalExp
    (31) expression -> . sumLessExpression
    (25) conditionalStmt -> . matchedif
    (26) conditionalStmt -> . unmatchedif
    (29) loopStmt -> . WHILE LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE
    (32) logicalExp -> . TRUE OR andExp
    (33) logicalExp -> . FALSE OR andExp
    (34) logicalExp -> . andExp
    (20) sumLessExpression -> . variable PLUS_ONE
    (21) sumLessExpression -> . variable MINUS_ONE
    (27) matchedif -> . IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE ELSE LEFT_BRACE declarationList RIGHT_BRACE
    (28) unmatchedif -> . IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE
    (35) andExp -> . TRUE AND compExp
    (36) andExp -> . FALSE AND compExp
    (37) andExp -> . compExp
    (38) compExp -> . sumExp compSign sumExp
    (39) compExp -> . sumExp
    (46) sumExp -> . term sumSign sumExp
    (47) sumExp -> . term
    (50) term -> . multiNegExp multiSign term
    (51) term -> . multiNegExp
    (54) multiNegExp -> . unaryOp multiNegExp
    (55) multiNegExp -> . factor
    (56) unaryOp -> . MINUS
    (57) unaryOp -> . PLUS
    (58) factor -> . variable
    (59) factor -> . variableType
    (60) factor -> . IDENTIFIER
    (61) factor -> . LEFT_PAR expression RIGHT_PAR
    (11) variableType -> . number
    (14) variableType -> . STRING
    (15) variableType -> . TRUE
    (16) variableType -> . FALSE
    (12) number -> . INTEGER
    (13) number -> . FLOAT

    USE             shift and go to state 1
    PRINT           shift and go to state 6
    DOLLAR          shift and go to state 24
    WHILE           shift and go to state 5
    TRUE            shift and go to state 13
    FALSE           shift and go to state 30
    IF              shift and go to state 28
    MINUS           shift and go to state 14
    PLUS            shift and go to state 16
    IDENTIFIER      shift and go to state 20
    LEFT_PAR        shift and go to state 36
    STRING          shift and go to state 10
    INTEGER         shift and go to state 19
    FLOAT           shift and go to state 32

    varDeclaration                 shift and go to state 2
    variableType                   shift and go to state 7
    matchedif                      shift and go to state 3
    number                         shift and go to state 11
    loopStmt                       shift and go to state 4
    logicalExp                     shift and go to state 8
    multiNegExp                    shift and go to state 9
    conditionalStmt                shift and go to state 12
    statement                      shift and go to state 17
    factor                         shift and go to state 18
    sumLessExpression              shift and go to state 21
    constDeclaration               shift and go to state 22
    declarationList                shift and go to state 103
    andExp                         shift and go to state 29
    declaration                    shift and go to state 26
    variable                       shift and go to state 27
    term                           shift and go to state 25
    unaryOp                        shift and go to state 31
    compExp                        shift and go to state 33
    sumExp                         shift and go to state 34
    funcDeclaration                shift and go to state 35
    unmatchedif                    shift and go to state 37
    expression                     shift and go to state 38

state 103

    (27) matchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE ELSE LEFT_BRACE declarationList . RIGHT_BRACE

    RIGHT_BRACE     shift and go to state 104


state 104

    (27) matchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE ELSE LEFT_BRACE declarationList RIGHT_BRACE .

    IF              reduce using rule 27 (matchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE ELSE LEFT_BRACE declarationList RIGHT_BRACE .)
    WHILE           reduce using rule 27 (matchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE ELSE LEFT_BRACE declarationList RIGHT_BRACE .)
    USE             reduce using rule 27 (matchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE ELSE LEFT_BRACE declarationList RIGHT_BRACE .)
    DOLLAR          reduce using rule 27 (matchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE ELSE LEFT_BRACE declarationList RIGHT_BRACE .)
    TRUE            reduce using rule 27 (matchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE ELSE LEFT_BRACE declarationList RIGHT_BRACE .)
    FALSE           reduce using rule 27 (matchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE ELSE LEFT_BRACE declarationList RIGHT_BRACE .)
    PRINT           reduce using rule 27 (matchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE ELSE LEFT_BRACE declarationList RIGHT_BRACE .)
    MINUS           reduce using rule 27 (matchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE ELSE LEFT_BRACE declarationList RIGHT_BRACE .)
    PLUS            reduce using rule 27 (matchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE ELSE LEFT_BRACE declarationList RIGHT_BRACE .)
    STRING          reduce using rule 27 (matchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE ELSE LEFT_BRACE declarationList RIGHT_BRACE .)
    IDENTIFIER      reduce using rule 27 (matchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE ELSE LEFT_BRACE declarationList RIGHT_BRACE .)
    LEFT_PAR        reduce using rule 27 (matchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE ELSE LEFT_BRACE declarationList RIGHT_BRACE .)
    INTEGER         reduce using rule 27 (matchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE ELSE LEFT_BRACE declarationList RIGHT_BRACE .)
    FLOAT           reduce using rule 27 (matchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE ELSE LEFT_BRACE declarationList RIGHT_BRACE .)
    $end            reduce using rule 27 (matchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE ELSE LEFT_BRACE declarationList RIGHT_BRACE .)
    RIGHT_BRACE     reduce using rule 27 (matchedif -> IF LEFT_PAR logicalExp RIGHT_PAR LEFT_BRACE declarationList RIGHT_BRACE ELSE LEFT_BRACE declarationList RIGHT_BRACE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MINUS in state 25 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 25 resolved as shift
